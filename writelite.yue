local *

import 'quicktype' as :declare_singleton_type, :declare_type, :F

declare_type 'writelite.Writelite', [[{
  transaction: ((Transaction) -> <>) => <>,
  close: () => ?BUSY,
}]]
export class Writelite
  new: F '(string, writelite.File) => <>', (@_path) =>
    @_journal_path = @_path .. '~'
    @_main_file = with assert io.open @_path, 'w+'
      \setvbuf 'full' -- Minimise writes.
    @_writelite_open = true
    @_transaction_open = false

    if journal = io.open @_journal_path, 'r'
      @_recover_journal @_main_file, journal

  _recover_journal: F '() => <>', =>
    error 'todo'

  transaction: F '((Transaction) -> <>) => ?BUSY', (f) =>
    @_transaction_open = true

    txn = Transaction @_main_file, @_journal_path
    err = nil
    try
      f txn
    catch err2
      err = err2
    txn\_close!

    @_transaction_open = false

    if err?
      error err
    return

  close: F '() => <>', =>
    assert not @_transaction_open, 'cannot close Writelite whilst transaction is open'
    assert @_writelite_open, 'cannot close Writelite twice'

    @_main_file\close!

    @_writelite_open = false

export BUSY = <tostring>: => 'BUSY'
declare_singleton_type BUSY

declare_type 'writelite.Transaction', [[{
  write: (string) => <>,
  seek: (Whence, ?number) => <>,
  abort: () => <>,
}]]
declare_type 'writelite.File', [[{
  write: (string) => <>
  seek: (Whence, ?number) => <>,
  close: () => <>,
}]]
declare_type 'Whence', '"set"|"cur"|"end"'
class Transaction
  new: F '(writelite.File, string) => <>', (@_main_file, @_journal_path) =>
    @_pages = T '[writelite.Page]', {}
    @_len = T 'number', 0
    @_cursor = T 'number', 0
    @_main_file\seek 'set', 0

  write: F '(string) => <>', (bytes) =>
    -- TODO(kcza): update @_len
    error 'todo'

  seek: F '(Whence, ?number) => <>', (whence, offset) =>
    switch whence
      when 'set'
        @_cursor = offset ?? 0
      when 'cur'
        assert offset?, 'internal error: "cur"-whence requires offset'
        @_cursor += offset
      when 'end'
        assert not offset?, 'internal error: "end"-whence cannot have no offset'
        @_cursor = @_len
      else
        error 'internal error: unreachable'

  _close: F '() => <>', =>
    -- Write to the journal
    -- Close the journal
    -- Write to the main file
    -- Delete the journal
    error 'todo'

class Page
  new: F '(number, string) => <>', (@_offset, @_content) =>
    error 'todo'
