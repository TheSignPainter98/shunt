local *

import 'quicktype' as :declare_type, :F, :T
import 'shunt.logger' as :log
import 'spec' as :spec

UNIMPLEMENTED = <call>: (...) ->

export class StateMachineBuilder
  new: F '(string) => <>', (@_name) =>
    if not valid_ident @_name
      error "cannot build state machine: name '#{@_name}' not a valid identifier"
    @_states = T '{string -> table}', {}
    @_initial_state_name = T '?string', nil
    @_reporter = T '?(State, State) => <>', nil
    @_endless = T 'boolean', false

  set_initial_state: F '(string) => Self', (@_initial_state_name) => @

  declare_endless: F '() => Self', =>
    @_endless = true
    @

  set_reporter: F '((State, State) => <>) => Self', (@_reporter) => @

  add: F '(State) => Self', (state) =>
    if @_states[state._name]?
      error "cannot build state machine: state '#{state._name}' redefined"
    @_states[state._name] = state
    @

  build: F '() => StateMachine', =>
    if err = @validate!
      error "cannot build state machine: #{err}"
    @build_unchecked!

  validate: F '() => ?string', =>
    if not @_initial_state_name?
      return 'initial state undefined'
    if not @_states[@_initial_state_name]?
      return "initial state '#{@_initial_state_name}' undefined"
    if @_states[@_initial_state_name]._data_type != 'nil'
      return 'initial state has data present'
    if not @_endless
      if err = @validate_end_states!
        return err
    else if err = @validate_endless!
        return err
    if err = @validate_transitions!
      return err

  validate_end_states: F '() => ?string', =>
    for _, state in pairs @_states
      if state._is_end
        return nil
    return "no end states declared"

  validate_endless: F '() => ?string', =>
    dead_ends = with {}
      for _, state in pairs @_states
        if #state._transition_list < 1
          [] = state._name
    if #dead_ends > 0
      table.sort dead_ends
      return "the following states are dead ends: #{table.concat dead_ends, ', '}"
    nil

  validate_transitions: F '() => ?string', =>
    seen = T '{string}', {}
    stack = T '[string]', {}
    local dfs
    dfs = F '(string, {string->[string]}) -> <>', (state_name, transitions) ->
      if seen[state_name]
        return
      seen[state_name] = true

      for name in *stack
        if name == state_name
          return -- Already explored
      stack[] = name
      for neighbour in *assert transitions[state_name], "internal error: no transitions for #{state_name}"
        dfs neighbour, transitions
      stack[#stack] = nil

    dfs @_initial_state_name, with {}
      for name, state in pairs @_states
        [name] = [ state_name for state_name, _ in pairs state._transitions ]

    non_reachable_from_start = with {}
      for state_name, _ in pairs @_states
        if not seen[state_name]
          [] = state_name
    if #non_reachable_from_start > 0
      table.sort non_reachable_from_start
      return "the following states are not reachable from the start state: #{table.concat non_reachable_from_start, ', '}"

    if not @_endless
      seen = {}
      stack = {}
      back_transitions = with {}
        for _, state in pairs @_states
          [state._name] = {}
        for _, state in pairs @_states
          for neighbour, _ in pairs state._transitions
            [neighbour][] = state._name
      end_states = [ state._name for _, state in pairs @_states when state._is_end ]
      for end_state in *end_states
        dfs end_state, back_transitions

      non_reachable_from_end = with {}
        for state_name, _ in pairs @_states
          if not seen[state_name]
            [] = state_name
      if #non_reachable_from_end > 0
        table.sort non_reachable_from_end
        return "the following states are not reachable from any end state: #{table.concat non_reachable_from_end, ', '}"

    return nil

  build_unchecked: F '() => StateMachine', =>
    index = with {}
      ended = false

      .name = @_name
      .states =
        <index>: T '{string->string}', with <>: {}
          for state_name, _ in pairs @_states
            [state_name] = state_name
          .<index> = (key) =>
            error "cannot get state '#{key}': no such state"
        <newindex>: (_, _) =>
          error "cannot set fields in states"

      .state = make_state @_initial_state_name, 'nil', nil

      states = @_states

      reporter = @_reporter
      .goto = F '(string, any) => <>', (name, data) =>
        if ended
          error "internal error: cannot transition ended state machine"
        if not states[@state.name]?._transitions[name]
          error "#{@name}: no such transition: #{@state.name} -> #{name}"
        new_state_spec = states[name]
        if not new_state_spec?
          error "internal error: no such state '#{name}'"
        prev_state = .state
        .state = make_state name, new_state_spec._data_type, data
        if reporter?
          reporter @, prev_state, .state

      end_states = { state._name, true for _, state in pairs @_states when state._is_end }
      .end = F '() => <>', =>
        if ended
          error "internal error: cannot end state machine twice"
        if not end_states[@state.name]
          error "internal error: state #{@state.name} is not a valid end state"
        ended = true

      initial_state_name = @_initial_state_name
      .to_graphviz = F '() => string', =>
        lines = with {}
          [] = 'digraph {'
          [] = '  bgcolor = black'
          [] = '  color = white'
          [] = "  label = \"#{@name}\""
          [] = '  graph ['
          [] = '    fontname = "NewCenturySchlbk-Roman"'
          [] = '  ]'
          [] = '  node ['
          [] = '    color = white'
          [] = '    fontcolor = white'
          [] = '    fillcolor = white'
          [] = '    shape = plaintext'
          [] = '    fontname = "NewCenturySchlbk-Roman"'
          [] = '  ]'
          [] = '  edge ['
          [] = '    color = white'
          [] = '    fontcolor = white'
          [] = '    fontname = "NewCenturySchlbk-Roman"'
          [] = '  ]'
          [] = '  levels=1'

          [] = "  __init[shape=point]"
          [] = "  __init -> #{initial_state_name}"

          state_list = [ :state_name, :state for state_name, state in pairs states ]
          table.sort state_list, (a, b) -> a.state_name < b.state_name
          for { :state_name, :state } in *state_list
            [] = ''
            fontname_override = ''
            if state._is_end
              fontname_override = "fontname=\"NewCenturySchlbk-Italic\""
            [] = "  #{state_name}[#{fontname_override}]"

            num_transitions = #state._transition_list
            for i = 1, num_transitions
              other_state = state._transition_list[i]
              [] = "  #{state_name} -> #{other_state}[weight=#{1 + num_transitions - i}]"

          [] = '}'
        table.concat lines, '\n'

      .to_mermaid = F '() => string', =>
        lines = with {}
          [] = 'stateDiagram'
          [] = "  [*] --> #{initial_state_name}"
          state_list = [ :state_name, :state for state_name, state in pairs states ]
          table.sort state_list, (a, b) -> a.state_name < b.state_name
          for { :state_name, :state } in *state_list
            [] = "  #{state_name}"
            if state._is_end
              [] = "  #{state_name} --> [*]"

            neighbours = [ other_state for other_state in pairs state._transitions ]
            table.sort neighbours
            for neighbour in *neighbours
              [] = "  #{state_name} --> #{neighbour}"

        table.concat lines, '\n'

    T 'StateMachine',
      <index>: index,
      <newindex>: (key, v) =>
        error "cannot add field '#{key}' to state machine"

make_state = F '(string, string, any) -> {}', (name, data_type, data) ->
  T data_type, data
  with :name, <>: {}
    if 'table' == type data
      .<index> = data
    else
      .<index> = value: data
    .<newindex> = (key) =>
      local key_repr
      if 'string' == type key
        key_repr = ".#{key}"
      else
        key_repr = "[#{key}]"
      error "cannot directly assign state fields"

declare_type 'State', [[{
  _is_end: boolean,
  _transitions: {string},
  _data_type: ?string,
}]]
export class State
  new: F '(string) => <>', (@_name) =>
    if not valid_ident @_name
      error "cannot build state machine: state name '#{@_name}' not a valid identifier"

    @_transitions = T '{string}', {}
    @_transition_list = T '[string]', {}
    @_data_type = T 'string', 'nil'
    @_data_type_set = T 'boolean', false
    @_is_end = T 'boolean', false

  add_transition_to: F '(string) => Self', (name) =>
    if not valid_ident name
      error "cannot build state machine: state name '#{name}' not a valid identifier"
    if @_transitions[name]?
      error "cannot build state machine: transition #{@_name}->#{name} redefined"
    @_transitions[name] = true
    @_transition_list[] = name
    @

  declare_end_state: F '() => Self', =>
    @_is_end = true
    @

  set_data_type: F '(string) => Self', (data_type) =>
    if @_data_type_set
      error "cannot build state machine: data type for state #{@_name} already set"
    @_data_type_set = true
    @_data_type = data_type
    @

declare_type 'StateMachine', [[{
  state: {name: string},
  goto: (string, ?{string -> any}) => <>,
}]]

valid_ident = F '(string) -> boolean', (name) ->
  (name\match '^[a-z][a-z0-9_]+[a-z0-9]$')?

declare_type 'StateResponses', '{string->()-><>}'
export class StateResponsesBuilder
  new: F '(StateMachine) => <>', (@sm) =>
    @responses = T '{string->()-><>}', {}

  add: F '(string, () -> <>) => Self', (state, response) =>
    if not (rawget @sm.states.<index>, state)?
      error "cannot add response to #{@sm.name}: no such state '#{state}'"
    if @responses[state]?
      error "cannot add response to #{@sm.name}: response for '#{state}' already defined"
    @responses[state] = response
    @

  build: F '() => StateResponses', =>
    uncovered_states = with {}
      for state_name in pairs @sm.states.<index>
        if not @responses[state_name]?
          [] = state_name
    if #uncovered_states > 0
      table.sort uncovered_states
      error "cannot build state responses: the following states have no response: #{table.concat uncovered_states, ', '}"

    @responses

export shallow_log_reporter = (prev_state, state) =>
  log ->
    fragments = with {}
      [] = '$ '
      [] = @name
      [] = ':'
      [] = prev_state.name
      [] = '->'
      [] = state.name
      level_1_fields = [ :key, :value for key, value in pairs state.<index> ]
      table.sort level_1_fields, (a, b) -> a.key < b.key
      for { :key, :value } in *level_1_fields
        [] = '\n    '
        [] = key
        [] = ': '
        value_type = type value
        switch value_type
          when 'function', 'thread', 'table'
            [] = '('
            [] = tostring value
            [] = ')'
          when 'string'
            [] = '`'
            [] = tostring value
            [] = '\''
          else
            [] = tostring value
        if value_type == 'table'
          level_2_fields = [ :key2, :value2 for key2, value2 in pairs value ]
          table.sort level_2_fields, (a, b) -> a.key2 < b.key2
          for { :key2, :value2 } in *level_2_fields
            [] = '\n      '
            [] = key2
            [] = ': '
            switch type value2
              when 'function', 'thread', 'table'
                [] = '('
                [] = tostring value2
                [] = ')'
              when 'string'
                [] = '`'
                [] = tostring value2
                [] = '\''
              else
                [] = tostring value2
    table.concat fragments

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import anything, deep_eq, eq, errors, has_fields, len, matches, no_errors from matchers

  describe 'StateMachineBuilder', ->
    it 'exposes its name', ->
      EXPECTED = 'some_name'
      sm = (StateMachineBuilder EXPECTED)
        \set_initial_state 'q_0'
        \add (State 'q_0')
          \declare_end_state!
        \build!
      $expect_that sm.name, eq EXPECTED

    it 'rejects invalid state names', ->
      $expect_that (-> StateMachineBuilder 'invalid-ident'), errors matches "cannot build state machine: name 'invalid%-ident' not a valid identifier"

    it 'requires initial state', ->
      $expect_that (-> (StateMachineBuilder 'test_sm')\build!), errors matches "cannot build state machine: initial state undefined"

    it 'rejects invalid initial state', ->
      $expect_that (-> (StateMachineBuilder 'test_sm')\set_initial_state('phantom')\build!), errors matches "cannot build state machine: initial state 'phantom' undefined"

    it 'rejects duplicate state names', ->
      $expect_that (-> (StateMachineBuilder 'test_sm')
        \set_initial_state 'waiting'
        \add State 'waiting'
        \add State 'waiting'
        \build!), errors matches "cannot build state machine: state 'waiting' redefined"

    it 'rejects repeated \\set_data_type calls', ->
      $expect_that (-> (StateMachineBuilder 'test_sm')
        \set_initial_state 'waiting'
        \add (State 'waiting')
          \set_data_type 'string'
          \set_data_type 'number'
        \build!), errors matches "cannot build state machine: data type for state waiting already set"

    it 'rejects invalid state names', ->
      $expect_that (-> (StateMachineBuilder 'test_sm')
        \set_initial_state '-invalid'
        \add State '-invalid'
        \build!), errors matches "cannot build state machine: state name '%-invalid' not a valid identifier"

    it 'formats itself as graphviz', ->
      graphviz_repr = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add (State 'state_1')
          \declare_end_state!
          \add_transition_to 'state_2'
        \add (State 'state_2')
          \add_transition_to 'state_1'
          \set_data_type [[{
            hello: string,
            world: number,
          }]]
        \build!
        \to_graphviz!
      expected_lines =
        * 'digraph {'
        * '  bgcolor = black'
        * '  color = white'
        * '  label = "test_sm"'
        * '  graph ['
        * '    fontname = "NewCenturySchlbk-Roman"'
        * '  ]'
        * '  node ['
        * '    color = white'
        * '    fontcolor = white'
        * '    fillcolor = white'
        * '    shape = plaintext'
        * '    fontname = "NewCenturySchlbk-Roman"'
        * '  ]'
        * '  edge ['
        * '    color = white'
        * '    fontcolor = white'
        * '    fontname = "NewCenturySchlbk-Roman"'
        * '  ]'
        * '  levels=1'
        * '  __init[shape=point]'
        * '  __init -> state_1'
        * ''
        * '  state_1[fontname="NewCenturySchlbk-Italic"]'
        * '  state_1 -> state_2[weight=1]'
        * ''
        * '  state_2[]'
        * '  state_2 -> state_1[weight=1]'
        * '}'
      expected_repr = table.concat expected_lines, '\n'
      $expect_that graphviz_repr, eq expected_repr

    it 'formats itself as mermaid', ->
      mermaid_repr = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add (State 'state_1')
          \declare_end_state!
          \add_transition_to 'state_2'
        \add (State 'state_2')
          \add_transition_to 'state_1'
          \set_data_type [[{
            hello: string,
            world: number,
          }]]
        \build!
        \to_mermaid!
      expected_lines =
        * 'stateDiagram'
        * '  [*] --> state_1'
        * '  state_1'
        * '  state_1 --> [*]'
        * '  state_1 --> state_2'
        * '  state_2'
        * '  state_2 --> state_1'
      expected_repr = table.concat expected_lines, '\n'
      $expect_that mermaid_repr, eq expected_repr

    it 'accepts endless state machines', ->
      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \declare_endless!
        \add (State 'state_1')
          \add_transition_to 'state_1'
      $expect_that builder\build, no_errors!

    it 'rejects invalid transition graphs', ->
      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add State 'state_1'
      $expect_that builder\build, errors matches 'no end states declared'

      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add (State 'state_1')
          \declare_end_state!
          \add_transition_to 'state_2'
        \add (State 'state_2')
          \add_transition_to 'state_3'
        \add (State 'state_3')
          \add_transition_to 'state_1'
      $expect_that builder\build, no_errors!

      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add (State 'state_1')
          \declare_end_state!
        \add (State 'unreachable_1')
          \add_transition_to 'unreachable_2'
        \add (State 'unreachable_2')
      $expect_that builder\build, errors matches 'the following states are not reachable from the start state: unreachable_1, unreachable_2'

      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'state_1'
        \add (State 'state_1')
          \add_transition_to 'state_2'
        \add (State 'state_2')
          \declare_end_state!
          \add_transition_to 'interminable_1'
        \add (State 'interminable_1')
          \add_transition_to 'interminable_2'
        \add (State'interminable_2')
      $expect_that builder\build, errors matches 'the following states are not reachable from any end state: interminable_1, interminable_2'

      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'dead_end'
        \declare_endless!
        \add State 'dead_end'
      $expect_that builder\build, errors matches 'the following states are dead ends: dead_end'
      builder = (StateMachineBuilder 'test_sm')
        \set_initial_state 'hub'
        \declare_endless!
        \add (State 'hub')
          \add_transition_to 'dead_end_2'
          \add_transition_to 'dead_end_1'
        \add State 'dead_end_2'
        \add State 'dead_end_1'
      $expect_that builder\build, errors matches 'the following states are dead ends: dead_end_1, dead_end_2'

  describe 'valid_ident', ->
    valid_idents =
      * 'hello'
      * 'world_123'
    for ident in *valid_idents
      it "accepts '#{ident}'", ->
        $expect_that (valid_ident ident), eq true

    invalid_idents =
      * ''
      * '1234'
      * '-qwer'
      * '.asdf'
      * 'a-b'
    for ident in *invalid_idents
      it "rejects '#{ident}'", ->
        $expect_that (valid_ident ident), eq false

  make_test_sm = ->
    (StateMachineBuilder 'test_sm')
      \set_initial_state 'state_1'
      \add (State 'state_1')
        \declare_end_state!
        \add_transition_to 'state_2'
        \add_transition_to 'state_3'
      \add (State 'state_2')
        \declare_end_state!
        \set_data_type [[{
          hello: string,
          world: number,
          optional: ?string,
        }]]
        \add_transition_to 'state_1'
      \add (State 'state_3')
        \declare_end_state!
        \set_data_type 'number'
      \build!

  describe 'StateMachine', ->
    it 'rejects new fields', ->
      test_sm = make_test_sm!
      $expect_that (-> test_sm.foo = 'bar'), errors matches [[cannot add field 'foo' to state machine]]

    describe '.state', ->
      it 'exposes table data at its toplevel', ->
        test_sm = make_test_sm!
        test_sm\goto 'state_2',
          hello: 'asdf'
          world: 4321
        $expect_that test_sm.state.hello, eq 'asdf'
        $expect_that test_sm.state.world, eq 4321

      it 'exposes non-table data in the .data field', ->
        test_sm = make_test_sm!
        test_sm\goto 'state_3', 123
        $expect_that test_sm.state.value, eq 123

      it 'rejects assignment', ->
        test_sm = make_test_sm!
        test_sm\goto 'state_2',
          hello: 'asdf'
          world: 4321
        $expect_that (-> test_sm.state.absent = 'foo'), errors matches 'cannot directly assign state fields'
        $expect_that (-> test_sm.state.hello = nil), errors matches 'cannot directly assign state fields'
        $expect_that (-> test_sm.state.hello = 'bar'), errors matches 'cannot directly assign state fields'

    describe '\\goto', ->
      it 'requires at least one argument', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto!), errors anything!

      it 'correctly transitions states', ->
        test_sm = make_test_sm!
        $expect_that test_sm.state.name, eq 'state_1'

        test_sm\goto 'state_2',
          hello: 'asdf'
          world: 4321
        $expect_that test_sm.state.name, eq 'state_2'
        $expect_that test_sm.state.hello, eq 'asdf'
        $expect_that test_sm.state.world, eq 4321
        $expect_that test_sm.state.optional, eq nil

        test_sm\goto 'state_1'
        $expect_that test_sm.state.name, eq 'state_1'
        $expect_that test_sm.state.hello, eq nil
        $expect_that test_sm.state.world, eq nil
        $expect_that test_sm.state.optional, eq nil

      it 'rejects invalid transitions', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'invalid'), errors matches 'no such transition: state_1 %-> invalid'

        test_sm\goto 'state_3', 123
        $expect_that (-> test_sm\goto 'state_1'), errors matches 'no such transition: state_3 %-> state_1'

      it 'rejects transitions with missing data', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state_2'), errors matches 'incorrect type: expected table but got nil'
        $expect_that (-> test_sm\goto 'state_2', hello: 'asdf'), errors matches 'incorrect type: expected number but got nil'
        $expect_that (-> test_sm\goto 'state_2', world: 123), errors matches 'incorrect type: expected string but got nil'

      it 'validates state fields', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state_2', hello: 'asdf', world: 'fdsa'), errors matches 'incorrect type: expected number but got string'

      it 'rejects extra state fields', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state_3', spare: 'spare'), errors matches 'incorrect type'

      it 'rejects transition of ended state machine', ->
        test_sm = make_test_sm!
        test_sm\end!
        $expect_that (-> test_sm\goto 'state_2', hello: 'asdf', world: 123), errors matches 'cannot transition ended state machine'

    describe '\\end', ->
      it 'accepts valid end state', ->
        state_machine = (StateMachineBuilder 'test_sm')
          \set_initial_state 'state_1'
          \add (State 'state_1')
            \declare_end_state!

      it 'rejects invalid end state', ->
        state_machine = (StateMachineBuilder 'test_sm')
          \set_initial_state 'state_1'
          \add (State 'state_1')
            \add_transition_to 'state_2'
          \add (State 'state_2')
            \declare_end_state!
          \build!
        $expect_that state_machine\end, errors matches 'state_1 is not a valid end state'

    describe 'set_reporter', ->
      it 'is respected by state machines', ->
        states = {}
        test_sm = (StateMachineBuilder 'test_sm')
          \set_initial_state 'state_1'
          \set_reporter (prev_state, state) =>
            states[] = :prev_state, :state
          \add (State 'state_1')
            \add_transition_to 'state_2'
          \add (State 'state_2')
            \declare_end_state!
            \add_transition_to 'state_1'
            \set_data_type [[{
              hello: string,
              world: number
            }]]
          \build!

        data =
          hello: 'asdf'
          world: 123

        test_sm\goto 'state_2', data

        $expect_that states, deep_eq
          * prev_state: name: 'state_1'
            state: { name: 'state_2', ...data }

        test_sm\goto 'state_1'
        test_sm\goto 'state_2', data
        test_sm\goto 'state_1'
        test_sm\goto 'state_2', data

        $expect_that [ state for state in *states ], deep_eq
          * prev_state: name: 'state_1'
            state: { name: 'state_2', ...data }
          * prev_state: { name: 'state_2', ...data }
            state: { name: 'state_1' }
          * prev_state: { name: 'state_1' }
            state: { name: 'state_2', ...data }
          * prev_state: { name: 'state_2', ...data }
            state: { name: 'state_1' }
          * prev_state: { name: 'state_1' }
            state: { name: 'state_2', ...data }

    describe '.states', ->
      it 'contains all states', ->
        test_sm = make_test_sm!
        expected_states =
          * 'state_1'
          * 'state_2'
          * 'state_3'
        for expected_state in *expected_states
          $expect_that test_sm.states[expected_state], eq expected_state

      it 'rejects unknown states', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm.states.unknown), errors matches "cannot get state 'unknown': no such state"

      it 'rejects modifications', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm.states.state_1 = nil), errors matches 'cannot set fields in states'

  describe 'StateResponsesBuilder', ->
    it 'builds response', ->
      calls = {}
      builder = with StateResponsesBuilder make_test_sm!
        for name in *{'state_1', 'state_2', 'state_3'}
          \add name, F '() -> <>', () ->
            calls[] = :name

      responses = builder\build!
      responses.state_1!
      responses.state_2!
      responses.state_3!
      $expect_that calls, len eq 3
      $expect_that calls[1], has_fields
        name: eq 'state_1'
      $expect_that calls[2], has_fields
        name: eq 'state_2'
      $expect_that calls[3], has_fields
        name: eq 'state_3'

    it 'rejects unknown states', ->
      with StateResponsesBuilder make_test_sm!
        $expect_that (-> \add 'fribib', ->), errors matches "no such state"

    it 'rejects redefinition', ->
      with StateResponsesBuilder make_test_sm!
        \add 'state_1', ->
        $expect_that (-> \add 'state_1', ->), errors matches "response for 'state_1' already defined"

    it 'rejects incomplete coverage', ->
      with StateResponsesBuilder make_test_sm!
        $expect_that \build, errors matches 'no response: state_1, state_2, state_3'
