local *
local ScheduleGenerator
local ScheduleGeneratorImpl

import 'shunt.data.queue' as :Queue
import 'shunt.firewall' as :Firewall
import 'shunt.logger' as :log, :trace
import 'shunt.nodes.marshal.resource_orchestrator.promise_tracker' as :PromiseTracker
import 'shunt.nodes.marshal.util.pseudo_random' as :PseudoRandom
import 'shunt.peripheral.station' as :time_units
import 'shunt.quicktype' as :declare_type, :F, :T
import 'shunt.spec' as :spec
import 'shunt.state' as :shallow_log_reporter, :State, :StateMachineBuilder, :StateResponsesBuilder

declare_type 'Scheduler', [[{
  events: Queue,
  schedule_generator: (string, Factory, [Factory]) => ScheduleGenerator,
  train_is_lost: (string) => boolean,
}]]
declare_type 'ScheduleCandidate', [[{
  train_addr: TrainAddress,
  inbound_station_addr: StationAddress,
  outbound_station_addr: StationAddress,
  schedule: Schedule,
  info: {
    inbound_factory_name: string,
    resource: string,
  },
}]]
declare_type 'TrainAddress', [[
  { name: string }
  + StationAddress
]]
declare_type 'SchedulerEvent', [[{
  type: "network-packet",
  packet: Packet,
} | {
  type: "start-scheduling",
  schedule_generator: ScheduleGenerator,
} | {
  type: "declare-train-state",
  train_name: string,
  state: TrainState,
}]]
declare_type 'SchedulerOpts', [[{
  clock: Clock,
  rand: Random,
}]]
export class Scheduler
  new: F '(SchedulerOpts) => <>', (opts) =>
    {
      :clock,
      :rand
    } = opts
    @clock = clock
    @rand = rand
    @promise_tracker = PromiseTracker @rand, @clock

    @firewall = Firewall
      * FactoryHeartbeat
    @events = Queue 'SchedulerEvent'
    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

  @make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'scheduler')
      \set_initial_state 'waiting'
      \declare_endless!
      \set_reporter shallow_log_reporter
      \add (State 'waiting')
        \add_transition_to 'inspecting_packet'
        \add_transition_to 'scheduling'
        \add_transition_to 'enacting_train_state_declaration'
      \add (State 'inspecting_packet')
        \set_data_type [[{
          packet: Packet,
        }]]
        \add_transition_to 'analysing_factory_heartbeat'
      \add (State 'analysing_factory_heartbeat')
        \set_data_type [[{
          packet: FactoryHeartbeat,
        }]]
        \add_transition_to 'waiting'
      \add (State 'scheduling')
        \set_data_type [[{
          schedule_generator: ScheduleGenerator,
        }]]
        \add_transition_to 'waiting'
      \add (State 'enacting_train_state_declaration')
        \set_data_type [[{
          train_name: string,
          state: TrainState,
        }]]
        \add_transition_to 'waiting'
      \build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'waiting', @\on_waiting
      \add 'inspecting_packet', @\on_inspecting_packet
      \add 'analysing_factory_heartbeat', @\on_analysing_factory_heartbeat
      \add 'scheduling', @\on_scheduling
      \add 'enacting_train_state_declaration', @\on_enacting_train_state_declaration
      \build!

  step: F '() => <>', =>
    @sm_responses[@sm.state.name]!

  @DEFAULT_RESEND_COOLDOWN_SECONDS: 90

  on_waiting: F '() => <>', =>
    event = @events\dequeue!
    if not event?
      return
    switch event.type
      when 'network-packet'
        @sm\goto 'inspecting_packet',
          packet: event.packet
      when 'start-scheduling'
        @sm\goto 'scheduling',
          schedule_generator: event.schedule_generator
      when 'declare-train-state'
        @sm\goto 'enacting_train_state_declaration',
          train_name: event.train_name
          state: event.state
      else
        error "internal error: unrecognised event type '#{event.type}'"

  on_inspecting_packet: F '() => <>', =>
    { :packet } = @sm.state
    switch packet.protocol
      when 'FactoryHeartbeat'
        @sm\goto 'analysing_factory_heartbeat',
          packet: event.packet
      else
        error "internal error: unrecognised protocol '#{event.type}'"

  on_analysing_factory_heartbeat: F '() => <>', =>
    {
      packet:
        :stations
    } = @sm.state
    lost_trains = with {}
      for station in *stations.known
        for train in *station.present_trains
          if @train_is_lost train
            [] = train
    for lost_train in *lost_trains
      log -> "train '#{lost_train}' was lost. It will be ignored until manually cleared for use"
    @sm\goto 'waiting'

  on_scheduling: F '() => <>', =>
    { :schedule_generator } = @sm.state
    -- Await completion.
    if schedule_generator.done
      @sm\goto 'waiting'

  on_enacting_train_state_declaration: F '() => <>', =>
    { :train_name, :state } = @sm.state
    error_reason = switch state
      when 'cleared' -- TODO(kcza): this name is a leak from the CLI
        @promise_tracker\declare_train_found train_name
      when 'reserved'
        @promise_tracker\reserve train_name
        nil
      else
        "internal error: unknown train state '#{state}'"
    if error_reason?
      log ->
        "cannot enact train state '#{train_name}'='#{state}': #{error_reason}"

    @sm\goto 'waiting'

  schedule_generator: F '(string, Factory, [Factory]) => ScheduleGenerator', (resource, factory, factories) =>
    schedule_generator = ScheduleGenerator
      :factories
      :factory
      parent_scheduler: @
      rand: @rand
      :resource
    @events\enqueue
      type: 'start-scheduling'
      :schedule_generator
    schedule_generator

  train_is_lost: F '(string) => boolean', (train_name) =>
    @promise_tracker\train_is_lost train_name

  ut_break_all_promises: F '() => <>', =>
    @promise_tracker\ut_break_all_promises!

  ut_promise: F '(string, [PromiseStation]) => Promise', (train, stations) =>
    @promise_tracker\promise train, stations

  ut_break_promise: F '(Promise) => <>', (promise) =>
    @promise_tracker\break_promise promise

declare_type 'ScheduleGenerator', [[{
  try_generate_schedule: () => <?ScheduleCandidate, boolean>,
  end_generation: () => <>,
}]]
declare_type 'ScheduleGeneratorOpts', [[{
  factories: [Factory],
  factory: Factory,
  parent_scheduler: Scheduler,
  rand: Random,
  resource: string,
}]]
export class ScheduleGenerator
  new: F '(ScheduleGeneratorOpts) => <>', (opts) =>
    {
      :factories
      :factory
      :parent_scheduler
      :rand
      :resource
    } = opts
    @parent_scheduler = parent_scheduler
    @inner = ScheduleGeneratorImpl
      :factories
      :factory
      promise_tracker: parent_scheduler.promise_tracker
      :rand
      :resource

    @done = T 'boolean', false

    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

  @make_sm: F '() => StateMachine', =>
    @sm_builder ??= (StateMachineBuilder 'schedule_generator')
      \set_initial_state 'generating_schedules'
      \set_reporter shallow_log_reporter
      \add (State 'generating_schedules')
        \add_transition_to 'proposing_schedule'
        \add_transition_to 'out_of_schedules'
      \add (State 'proposing_schedule')
        \set_data_type [[{
          schedule: ScheduleCandidate,
          schedules: Queue,
          promise: Promise,
        }]]
        \add_transition_to 'generating_schedules'
        \add_transition_to 'proposing_schedule'
        \declare_end_state!
      \add (State 'out_of_schedules')
        \declare_end_state!
    @sm_builder\build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'generating_schedules', @\on_generating_schedules
      \add 'proposing_schedule', @\on_proposing_schedule
      \add 'out_of_schedules', @\on_out_of_schedules
      \build!

  try_generate_schedule: F '() => <?ScheduleCandidate, boolean>', =>
    @step!
    states = @sm.states
    switch @sm.state.name
      when states.generating_schedules
        nil, true
      when states.proposing_schedule
        @sm.state.schedule, true
      when states.out_of_schedules
        @end_generation!
        nil, false
      else
        error "internal error: unexpected state '#{@sm.state.name}'"

  step: F '() => <>', =>
    if @parent_scheduler.sm.state.name != 'scheduling'
      return -- Await stable data.
    @sm_responses[@sm.state.name]!

  end_generation: F '() => <>', =>
    if @done
      return
    @done = true
    @sm\end!

  on_generating_schedules: F '() => <>', =>
    @inner\step!
    states = @inner.sm.states
    switch @inner.sm.state.name
      when states.generating_inbound_local_schedules, states.generating_outbound_local_schedules, states.generating_global_schedules
        if @sm.state.name != 'generating_schedules'
          @sm\goto 'generating_schedules'
      when states.proposing_inbound_local_schedules, states.proposing_outbound_local_schedules, states.proposing_global_schedules
        if @sm.state.name == @sm.states.proposing_schedule
          {
            schedule:
              info:
                :inbound_factory_name
                :resource
            :promise
          } = @sm.state
          @parent_scheduler.promise_tracker\break_promise promise

        schedules = @inner.sm.state.schedules
        schedules = with Queue 'ScheduleCandidate'
          for schedule in *schedules
            \enqueue schedule
        if schedule = schedules\dequeue!
          {
            train_addr:
              name: train_name
            :inbound_station_addr
            :outbound_station_addr
            info:
              :inbound_factory_name
              :resource
          } = schedule
          promise = @parent_scheduler.promise_tracker\promise train_name,
            * inbound_station_addr.station
            * outbound_station_addr.station
          @sm\goto 'proposing_schedule',
            :schedule
            :schedules
            :promise
      when states.out_of_schedules
        @sm\goto 'out_of_schedules'
      else
        error "internal error: unexpected inner state '#{@inner.sm.state.name}'"

  on_proposing_schedule: F '() => <>', =>
    { :schedules } = @sm.state
    if schedule = schedules\dequeue!
      {
        train_addr:
          name: train_name
        :inbound_station_addr
        :outbound_station_addr
        info:
          :inbound_factory_name
          :resource
      } = schedule
      promise = @parent_scheduler.promise_tracker\promise train_name,
        * inbound_station_addr.station
        * outbound_station_addr.station
      @sm\goto 'proposing_schedule',
        :schedule
        :schedules
        :promise
    else
      @sm\goto 'generating_schedules'

  on_out_of_schedules: F '() => <>', =>

declare_type 'ScheduleGeneratorImplOpts', [[{
  factories: [Factory],
  factory: Factory,
  promise_tracker: PromiseTracker,
  rand: Random,
  resource: string,
}]]
export class ScheduleGeneratorImpl
  new: F '(ScheduleGeneratorImplOpts) => <>', (opts) =>
    {
      :factories
      :factory
      :promise_tracker
      :rand
      :resource
    } = opts
    @factories = factories
    @factory = factory
    @promise_tracker = promise_tracker
    @resource = resource
    @rand = rand

    @already_proposed_schedules = T '[ScheduleCandidate]', {}

    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

    @inbound_station_addrs = @_inbound_station_addrs resource, factory
    networks = with {}
      seen_networks = {}
      for inbound_station_addr in *@inbound_station_addrs
        network = inbound_station_addr.station.network
        if seen_networks[network]
          continue
        seen_networks[network] = true
        [] = network
    @free_inbound_station_addrs_by_network = @_free_station_addrs_by_network @inbound_station_addrs
    @outbound_station_addrs, @outbound_station_addrs_by_network = @_outbound_station_addrs resource, networks, factories

  _inbound_station_addrs: F '(string, Factory) => [StationAddress]', (resource, factory) =>
    with {}
      for station in *factory.stations.known
        if station.type != 'inbound'
          continue
        if station.handles != resource
          continue
        if @promise_tracker\station_is_fully_promised station
          continue
        [] = :factory, :station

  _outbound_station_addrs: F '(string, [string], [Factory]) => <[StationAddress], {string->[StationAddress]}>', (resource, networks, factories) =>
    addrs = {}
    addrs_by_network = {}
    for network in *networks
      addrs = @_outbound_station_addrs_on_network resource, network, factories
      addrs_by_network[network] = addrs
      for addr in *addrs
        addrs[] = addr
    addrs, addrs_by_network

  _outbound_station_addrs_on_network: F '(string, string, [Factory]) => [StationAddress]', (resource, network, factories) =>
    with {}
      for factory in *factories
        if not @_factory_has_surplus_resource resource, factory
          continue

        for station in *factory.stations.known
          if station.handles != resource
            continue
          if station.type != 'outbound'
            continue
          if station.network != network
            continue
          if @promise_tracker\station_is_fully_promised station
            continue
          [] = :factory, :station

  _factory_has_surplus_resource: F '(string, Factory) => boolean', (resource, factory) =>
    for detected_resource in *factory.stockpile.known
      if detected_resource.name != resource
        continue
      if not detected_resource.surplus_amount?
        continue
      if detected_resource.stored < detected_resource.surplus_amount
        continue
      return true
    false

  _free_station_addrs_by_network: F '([StationAddress]) => {string->[StationAddress]}', (addrs) =>
    with {}
      for addr in *addrs
        station = addr.station
        if #station.present_trains >= station.capacity
          continue

        network = station.network
        if not [network]?
          [network] = {addr}
        else
          [network][] = addr

  @make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'schedule_generator_impl')
      \set_initial_state 'generating_inbound_local_schedules'
      \set_reporter shallow_log_reporter
      \add (State 'generating_inbound_local_schedules')
        \add_transition_to 'proposing_inbound_local_schedules'
        \add_transition_to 'generating_outbound_local_schedules'
      \add (State 'proposing_inbound_local_schedules')
        \set_data_type [[{
          schedules: [ScheduleCandidate],
        }]]
        \add_transition_to 'generating_outbound_local_schedules'
        \declare_end_state!
      \add (State 'generating_outbound_local_schedules')
        \add_transition_to 'proposing_outbound_local_schedules'
        \add_transition_to 'generating_global_schedules'
      \add (State 'proposing_outbound_local_schedules')
        \set_data_type [[{
          schedules: [ScheduleCandidate],
        }]]
        \add_transition_to 'generating_global_schedules'
        \declare_end_state!
      \add (State 'generating_global_schedules')
        \add_transition_to 'proposing_global_schedules'
        \add_transition_to 'out_of_schedules'
      \add (State 'proposing_global_schedules')
        \set_data_type [[{
          schedules: [ScheduleCandidate],
        }]]
        \add_transition_to 'out_of_schedules'
        \declare_end_state!
      \add (State 'out_of_schedules')
        \declare_end_state!
      \build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'generating_inbound_local_schedules', @\on_generating_inbound_local_schedules
      \add 'proposing_inbound_local_schedules', @\on_proposing_inbound_local_schedules
      \add 'generating_outbound_local_schedules', @\on_generating_outbound_local_schedules
      \add 'proposing_outbound_local_schedules', @\on_proposing_outbound_local_schedules
      \add 'generating_global_schedules', @\on_generating_global_schedules
      \add 'proposing_global_schedules', @\on_proposing_global_schedules
      \add 'out_of_schedules', @\on_out_of_schedules
      \build!

  step: F '() => <>', =>
    @sm_responses[@sm.state.name]!

  on_generating_inbound_local_schedules: F '() => <>', =>
    schedules = with {}
      for inbound_station_addr in *@inbound_station_addrs
        station = inbound_station_addr.station
        for train_name in *station.present_trains
          if @promise_tracker\train_is_promised train_name
            continue

          outbound_station_addr = @rand\pick @outbound_station_addrs_by_network[station.network]
          if not outbound_station_addr?
            continue

          [] =
            train_addr:
              name: train_name
              :station
              factory: @factory
            :inbound_station_addr
            :outbound_station_addr
            schedule: @_train_schedule
              inbound_addr: inbound_station_addr
              outbound_addr: outbound_station_addr
            info:
              inbound_factory_name: inbound_station_addr.factory.name
              resource: @resource
    schedules = @make_schedules_unique schedules
    if #schedules > 0
      @rand\shuffle schedules
      @sm\goto 'proposing_inbound_local_schedules',
        :schedules
    else
      @sm\goto 'generating_outbound_local_schedules'

  on_proposing_inbound_local_schedules: F '() => <>', =>
    @sm\goto 'generating_outbound_local_schedules'

  on_generating_outbound_local_schedules: F '() => <>', =>
    schedules = with {}
      for outbound_station_addr in *@outbound_station_addrs
        { :factory, :station } = outbound_station_addr

        for train_name in *outbound_station_addr.station.present_trains
          if @promise_tracker\train_is_promised train_name
            continue

          inbound_station_addrs = @free_inbound_station_addrs_by_network[outbound_station_addr.station.network]
          if not inbound_station_addrs? or #inbound_station_addrs == 0
            continue
          inbound_station_addr = @rand\pick inbound_station_addrs

          [] =
            train_addr:
              name: train_name
              :station
              :factory
            :inbound_station_addr
            :outbound_station_addr
            schedule: @_train_schedule
              inbound_addr: inbound_station_addr
              outbound_addr: outbound_station_addr
            info:
              inbound_factory_name: inbound_station_addr.factory.name
              resource: @resource
    schedules = @make_schedules_unique schedules
    if #schedules > 0
      @rand\shuffle schedules
      @sm\goto 'proposing_outbound_local_schedules',
        :schedules
    else
      @sm\goto 'generating_global_schedules'

  on_proposing_outbound_local_schedules: F '() => <>', =>
    @sm\goto 'generating_global_schedules'

  on_generating_global_schedules: F '() => <>', =>
    train_addrs = @_train_addrs!

    schedules = {}
    for _ = 1, 25
      train_addr = @rand\pick train_addrs
      if not train_addr?
        break

      network = train_addr.station.network

      inbound_station_addrs = @free_inbound_station_addrs_by_network[network]
      if not inbound_station_addrs? or #inbound_station_addrs == 0
        continue
      inbound_station_addr = @rand\pick inbound_station_addrs

      outbound_station_addrs = @outbound_station_addrs_by_network[network]
      if not outbound_station_addrs? or #outbound_station_addrs == 0
        continue
      outbound_station_addr = @rand\pick outbound_station_addrs

      schedule =
        :train_addr
        :inbound_station_addr
        :outbound_station_addr
        schedule: @_train_schedule
          inbound_addr: inbound_station_addr
          outbound_addr: outbound_station_addr
        info:
          inbound_factory_name: inbound_station_addr.factory.name
          resource: @resource
      if not @_already_proposed schedule
        schedules[] = schedule
      @already_proposed_schedules[] = schedule
    if #schedules > 0
      @sm\goto 'proposing_global_schedules',
        :schedules
    else
      @sm\goto 'out_of_schedules'

  _train_addrs: F '() => [TrainAddress]', =>
    with {}
      for factory in *@factories
        for station in *factory.stations.known
          for name in *station.present_trains
            if @promise_tracker\train_is_promised name
              continue
            [] =
              :factory
              :station
              :name

  _train_schedule: F '({outbound_addr: StationAddress, inbound_addr: StationAddress}) => Schedule', (conf) =>
    { :outbound_addr, :inbound_addr } = conf
    {
      cyclic: false
      entries:
        -- TODO(kcza): rename the schedule (instruction), change type to make conditions specifically be `nil`
        * instruction:
            id: 'create:destination'
            data:
              text: outbound_addr.station.name
          conditions:
            * { @@MIN_WAIT_REACHED, @@CARGO_INACTIVE }
            * { @@MAX_WAIT_REACHED }
        * instruction:
            id: 'create:destination'
            data:
              text: inbound_addr.station.name
          conditions:
            * { @@MAX_WAIT_REACHED }
    }

  @CARGO_INACTIVE:
    id: "create:idle"
    data:
      value: 5
      time_unit: time_units.SECONDS
  @MIN_WAIT_REACHED:
    id: "create:delay"
    data:
      value: 15
      time_unit: time_units.SECONDS
  @MAX_WAIT_REACHED:
    id: "create:delay"
    data:
      value: 30
      time_unit: time_units.SECONDS

  on_proposing_global_schedules: F '() => <>', =>
    @sm\goto 'out_of_schedules'

  make_schedules_unique: F '([ScheduleCandidate]) => [ScheduleCandidate]', (schedules) =>
    with {}
      for schedule in *schedules
        if not @_already_proposed schedule
          [] = schedule
          @already_proposed_schedules[] = schedule

  _already_proposed: F '(ScheduleCandidate) => boolean', (candidate) =>
    {
      :inbound_station_addr,
      :outbound_station_addr,
      :train_addr,
    } = candidate
    for prior in *@already_proposed_schedules
      if prior.inbound_station_addr.station.name != inbound_station_addr.station.name
        continue
      if prior.outbound_station_addr.station.name != outbound_station_addr.station.name
        continue
      if prior.train_addr.name != train_addr.name
        continue
      return true
    false

  on_out_of_schedules: F '() => <>', =>

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.clock' as :TestClock
  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq, ge, gt, has_fields, le, len, lt, matches, not_ from matchers

  describe 'Scheduler', ->
    resource = 'minecraft:stone_bricks'
    network = 'mainline'
    inbound_station_name_1 = 'inbound_station-1'
    inbound_station_name_2 = 'inbound_station-2'
    factory_with_shortage_of_resource =
      name: 'factory_with_shortage'
      pc_id: 1
      operational: true
      last_seen_epoch: 1
      stations:
        known:
          * name: inbound_station_name_1
            type: 'inbound'
            handles: resource
            network: network
            capacity: 3
            present_trains:
              * 'valid_inbound_local_train_1'
              * 'valid_inbound_local_train_2'
          * name: inbound_station_name_2
            type: 'inbound'
            handles: resource
            network: network
            capacity: 2
            present_trains:
              * 'valid_inbound_local_train_3'
              * 'valid_inbound_local_train_4'
          * name: 'wrong_type_station'
            type: 'outbound'
            handles: resource
            network: network
            capacity: 2
            present_trains:
              * 'wrong_type_train'
          * name: 'wrong_resource_station'
            type: 'inbound'
            handles: 'minecraft:diamond_axe'
            network: network
            capacity: 2
            present_trains:
              * 'wrong_resource_train'
          * name: 'wrong_network_station'
            type: 'inbound'
            handles: resource
            network: 'wrong_shortage_network'
            capacity: 2
            present_trains:
              * 'wrong_network_train'
          * name: 'no_trains_inbound_station'
            type: 'inbound'
            handles: resource
            network: network
            capacity: 1
            present_trains: {}
        unknown:
          * name: 'unknown_station'
            capacity: 2
            present_trains:
              * 'unknown_station_train'
      stockpile:
        known:
          * name: resource
            stored: 64
            shortage_amount: 128
          * name: 'minecraft:iron_ingot'
            stored: 256
            shortage_amount: 128
          * name: 'minecraft:gold_ingot'
            stored: 64
            surplus_amount: 128
          * name: 'minecraft:diamond'
            stored: 256
            surplus_amount: 128
        unknown:
          * name: 'minecraft:dirt'
            stored: 64
        estimated_capacity: 64 * 9 * 3

    outbound_station_name = 'outbound_station'
    factory_with_surplus_of_resource =
      name: 'factory_with_surplus'
      pc_id: 1
      operational: true
      last_seen_epoch: 1
      stations:
        known:
          * name: outbound_station_name
            type: 'outbound'
            handles: resource
            network: network
            capacity: 3
            present_trains:
              * 'valid_outbound_local_train_1'
              * 'valid_outbound_local_train_2'
          * name: 'wrong_type_surplus_station'
            type: 'inbound'
            handles: resource
            network: network
            capacity: 2
            present_trains:
              * 'wrong_type_surplus_train'
          * name: 'wrong_resource_surplus_station'
            type: 'outbound'
            handles: 'minecraft:diamond_axe'
            network: network
            capacity: 2
            present_trains:
              * 'wrong_resource_surplus_train'
          * name: 'wrong_network_surplus_station'
            type: 'outbound'
            handles: resource
            network: 'wrong_surplus_network'
            capacity: 2
            present_trains:
              * 'wrong_network_surplus_train'
          * name: 'no_trains_surplus_station'
            type: 'inbound'
            handles: resource
            network: network
            capacity: 1
            present_trains: {}
          * name: 'full_surplus_station'
            type: 'inbound'
            handles: resource
            network: network
            capacity: 1
            present_trains:
              * 'full_surplus_train'
        unknown:
          * name: 'unknown_surplus_station'
            capacity: 2
            present_trains:
              * 'unknown_station_surplus_train'
      stockpile:
        known:
          * name: resource
            stored: 2048
            surplus_amount: 128
          * name: 'minecraft:iron_ingot'
            stored: 256
            shortage_amount: 128
          * name: 'minecraft:gold_ingot'
            stored: 64
            surplus_amount: 128
          * name: 'minecraft:diamond'
            stored: 256
            surplus_amount: 128
        unknown:
          * name: 'minecraft:dirt'
            stored: 64
        estimated_capacity: 64 * 9 * 3
    factories =
      * factory_with_shortage_of_resource
      * factory_with_surplus_of_resource

    candidate_repr = F '(ScheduleCandidate) -> string', (candidate) ->
      "#{candidate.train_addr.name}:#{candidate.outbound_station_addr.station.name}->#{candidate.inbound_station_addr.station.name}"

    gather_candidates = F '({scheduler: Scheduler, resource: string, factory: Factory, factories: [Factory]}) -> [ScheduleCandidate]', (opts) ->
      {
        :scheduler
        :resource
        :factory
        :factories
      } = opts
      with {}
        schedule_generator = scheduler\schedule_generator resource,
          factory,
          factories

        for _ = 1, 10
          if scheduler.sm.state.name == 'scheduling'
            break
          scheduler\step!
        $assert_that scheduler.sm.state.name, eq 'scheduling'

        generation_ended = false
        for i = 1, 100
          candidate, can_continue = schedule_generator\try_generate_schedule!
          [] = candidate
          if not can_continue
            generation_ended = true
            break
        $assert_that generation_ended, eq true

    it 'emits valid schedules', ->
      clock = TestClock!
      rand = PseudoRandom 12345
      scheduler = Scheduler :clock, :rand
      schedule_generator = scheduler\schedule_generator resource, factory_with_shortage_of_resource, factories

      candidates = gather_candidates
        :scheduler
        :resource
        factory: factory_with_shortage_of_resource
        :factories
      $assert_that candidates, len gt 0

      for candidate in *candidates
        $expect_that candidate.schedule.cyclic, eq false

        local goto_inbound_instruction_index
        local goto_outbound_instruction_index

        for i = 1, #candidate.schedule.entries
          entry = candidate.schedule.entries[i]

          if entry.instruction.id != 'create:destination'
            continue

          station_name = entry.instruction.data.text
          if station_name\match 'inbound'
            if goto_inbound_instruction_index?
              error 'schedule heads to inbound multiple times'
            goto_inbound_instruction_index = i
          else if station_name\match 'outbound'
            if goto_outbound_instruction_index?
              error 'schedule heads to outbound multiple times'
            goto_outbound_instruction_index = i
          else
            error "unexpected station: #{station_name}"

          $expect_that #entry.conditions, gt 0

        $expect_that goto_outbound_instruction_index, not_ eq nil
        $expect_that goto_inbound_instruction_index, not_ eq nil
        $expect_that goto_outbound_instruction_index, lt goto_inbound_instruction_index

    it 'emits unique schedules', ->
      clock = TestClock!
      rand = PseudoRandom 12345
      scheduler = Scheduler :clock, :rand
      schedule_generator = scheduler\schedule_generator resource, factory_with_shortage_of_resource, factories

      candidates = gather_candidates
        :scheduler
        :resource
        factory: factory_with_shortage_of_resource
        :factories
      for i = 1, #candidates
        for j = 1, #candidates
          if i == j
            continue
          $assert_that candidates[i], not_ deep_eq candidates[j]

    it 'respects promised trains', ->
      rand = PseudoRandom 12345
      clock = TestClock!

      RESOURCE = 'minecraft:stone_pickaxe'
      NETWORK = 'mainline'
      inbound_station =
        name: 'inbound-station'
        type: 'inbound'
        handles: RESOURCE
        network: NETWORK
        capacity: 1
        present_trains: {}
      outbound_station =
        name: 'outbound-station'
        type: 'outbound'
        handles: RESOURCE
        network: NETWORK
        capacity: 1
        present_trains: {}
      unrelated_station =
        name: 'unrelated-station'
        type: 'inbound'
        handles: RESOURCE
        network: NETWORK
        capacity: 1
        present_trains: {}
      factories =
        * name: 'factory-with-shortage'
          pc_id: 1
          operational: true
          last_seen_epoch: 1
          stations:
            known:
              * inbound_station
            unknown: {}
          stockpile:
            known:
              * name: RESOURCE
                stored: 0
                shortage_amount: 10
            unknown: {}
            estimated_capacity: 12345
        * name: 'factory-with-surplus'
          pc_id: 2
          operational: true
          last_seen_epoch: 1
          stations:
            known:
              * outbound_station
            unknown: {}
          stockpile:
            known:
              * name: RESOURCE
                stored: 100
                surplus_amount: 10
            unknown: {}
            estimated_capacity: 12345
        * name: 'siding'
          pc_id: 3
          operational: true
          last_seen_epoch: 1
          stations:
            known:
              * unrelated_station
            unknown: {}
          stockpile:
            known: {}
            unknown: {}
            estimated_capacity: 0

      scheduler = Scheduler :clock, :rand
      get_candidates = ->
        ret = gather_candidates
          :scheduler
          resource: RESOURCE
          factory: factories[1]
          :factories
        scheduler\ut_break_all_promises!
        ret

      $assert_that #get_candidates!, eq 0

      factories[1].stations.known[1].present_trains = {'free-train'}
      $assert_that #get_candidates!, eq 1

      promise = scheduler\ut_promise 'unrelated-train', {inbound_station}
      $assert_that #(get_candidates promise), eq 0

      $assert_that #get_candidates!, eq 1

      factories[1].stations.known[1].present_trains = {}
      $assert_that #get_candidates!, eq 0

      factories[2].stations.known[1].present_trains = {'free-train'}
      $assert_that #get_candidates!, eq 1

      promise = scheduler\ut_promise 'unrelated-train', {outbound_station}
      $assert_that #(get_candidates promise), eq 0
      $assert_that #get_candidates!, eq 1

      PROMISED_TRAIN = 'promised-train'
      factories[2].stations.known[1].present_trains = {PROMISED_TRAIN}

      promise = scheduler\ut_promise PROMISED_TRAIN,
        * name: 'other-station'
          capacity: 1
      $assert_that #get_candidates!, eq 0
      scheduler\ut_break_promise promise
      $assert_that #get_candidates!, eq 1

    it 'defines sound waiting conditions', ->
      {
        :CARGO_INACTIVE
        :MIN_WAIT_REACHED
        :MAX_WAIT_REACHED
      } = ScheduleGeneratorImpl
      { :DEFAULT_RESEND_COOLDOWN_SECONDS } = Scheduler

      $expect_that CARGO_INACTIVE.id, eq 'create:idle'
      $expect_that MIN_WAIT_REACHED.id, eq 'create:delay'
      $expect_that MAX_WAIT_REACHED.id, eq 'create:delay'

      implied_time = (condition) ->
        scale = switch condition.data.time_unit
          when time_units.TICKS
            0.05
          when time_units.SECONDS
            1
          when time_units.MINUTES
            60
        scale * condition.data.value
      cargo_inactive_time = implied_time CARGO_INACTIVE
      min_wait_reached_time = implied_time MIN_WAIT_REACHED
      max_wait_reached_time = implied_time MAX_WAIT_REACHED
      $assert_that cargo_inactive_time, lt min_wait_reached_time
      $assert_that min_wait_reached_time, lt max_wait_reached_time

      $assert_that DEFAULT_RESEND_COOLDOWN_SECONDS, gt 2 * max_wait_reached_time

  -- describe 'ScheduleGenerator', ->
  --   it 'prioritises trains by locality', ->

-- TODO(kcza): check generation is producing a decent number of schedules
-- TODO(kcza): check train locality by pattern-matching names
