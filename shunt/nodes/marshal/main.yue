local *

-- TODO(kcza): Check station-name uniqueness

import 'shunt.clock' as :MinecraftClock
import 'shunt.cmd.declare' as :DeclareTrainState, :DeclareTrainStateResponse
import 'shunt.compat' as :HOST
import 'shunt.configurator.listener' as :ConfigListener
import 'shunt.configurator.main' as :GetConfigResponse, :MarshalIdentityRequest, :MarshalIdentityResponse, :SetConfigResponse
import 'shunt.data.queue' as :Queue
import 'shunt.firewall' as :Firewall
import 'shunt.logger' as :log, :trace
import 'shunt.nodes.factory.main' as :FactoryHeartbeat
import 'shunt.nodes.marshal.resource_orchestrator.main' as :ResourceOrchestrator
import 'shunt.nodes.marshal.resource_orchestrator.promise_tracker' as :PromiseTracker
import 'shunt.nodes.marshal.resource_orchestrator.scheduler' as :Scheduler
import 'shunt.nodes.marshal.util.pseudo_random' as :PseudoRandom
import 'shunt.pc' as :Pc
import 'shunt.peripheral.uplink' as :IdempotenceToken, :Packet, :TestUplinkBackend, :TIMEOUT, :Uplink
import 'shunt.quicktype' as :declare_type, :F, :is, :T
import 'shunt.spec' as :running_tests, :spec
import 'shunt.state' as :shallow_log_reporter, :State, :StateMachineBuilder, :StateResponsesBuilder
import 'shunt.upgrade.listener' as :UpgradeListener

import 'shunt.toml'

export default_config = -> [=[
[marshal]
resend_cooldown_seconds = 60
]=]

export main = F '(MarshalConfig) -> <>', (config) ->
  log -> 'starting marshal'

  state = nil
  with? io.open '.shunt-state.toml'
    state, err = toml.decode assert \read '*a'
    assert \close!
    if err?
      print err
      return

  pc = Pc!
  uplink = Uplink!
  with Marshal :config, :pc, :uplink
    \load!
    \run!

STEP_INTERVAL = 60

declare_type 'Network', [[{
  name: string,
  factories: [Factory],
}]]
declare_type 'Factory', [[{
  -- Constant
  name: string,
  pc_id: number,
  -- Variable
  last_seen_epoch: number,
  stations: DetectedStations,
  stockpile: DetectedStockpile,
}]]
declare_type 'TrainStatus', [[{
  -- Constant:
  name: string,
  -- Variable:
  last_seen_epoch: number,
  last_seen_at_factory: string,
  last_seen_at_station: string,
}]]

declare_type 'MarshalConfig', [[{
  marshal: {
    resend_cooldown_seconds: ?number,
  },
}]]
declare_type 'MarshalEvent', [[{
  type: "network-packet",
  packet: Packet,
} | {
  type: "new-epoch",
  new_epoch: number,
} | {
  type: "new-config",
  config: MarshalConfig,
}]]
declare_type 'StationAddress', [[{
  factory: Factory,
  station: StationConfig,
}]]
declare_type 'DeliveryOptionSet', [[{
  inbound_station: StationAddress,
  outbound_stations: [StationAddress],
  trains: [AvailableTrain],
}]]
declare_type 'DeliveryOption', [[{
  inbound_station: string,
  outbound_station: string,
  train: AvailableTrain,
}]]
declare_type 'AvailableTrain', [[{
  at_factory: {
    name: string,
    pc_id: number,
  },
  at_station: {
    name: string,
  },
  name: string,
}]]
declare_type 'MarshalSnapshot', [[{
  version: number,
  epoch: number,
  promise_tracker_snapshot: PromiseTrackerSnapshot,
}]]
declare_type 'MarshalOpts', [[{
  config: MarshalConfig+StoredConfig,
  pc: Pc,
  uplink: Uplink,
  rand: ?Random,
  clock: ?Clock,
}]]
export class Marshal
  @SAVE_FILE: '.marshal-state.json'

  new: F '(MarshalOpts) => <>', (opts) =>
    {
      :config,
      :pc,
      :uplink,
      :rand=PseudoRandom!,
      :clock=MinecraftClock!
    } = opts
    @config = config -- TODO(kcza): changes may still be in the pipeline on reloads.
    @pc = pc
    @uplink = uplink
    @rand = rand
    @clock = clock

    @do_count_epochs = T 'boolean', true
    @throttle = T 'boolean', HOST == 'minecraft'

    @events = T 'Queue', Queue 'MarshalEvent'

    @scheduler = T 'Scheduler',
      Scheduler
        clock: @clock
        resend_cooldown_seconds: @config.resend_cooldown_seconds
        rand: @rand
    @resource_orchestrator = T 'ResourceOrchestrator',
      ResourceOrchestrator
        :clock
        :config
        scheduler: @scheduler
        :uplink
    @upgrade_listener = T 'UpgradeListener',
      UpgradeListener
        :config
        :uplink
    @config_listener = T 'ConfigListener',
      ConfigListener
        config_type: 'MarshalConfig'
        target: @
        :uplink

    @child_components = T '[Component]',
      * @scheduler
      * @resource_orchestrator
      * @upgrade_listener
      * @config_listener

    allowed_packet_types =
      * MarshalIdentityRequest
      * DeclareTrainState
    @firewall = with Firewall allowed_packet_types
      for child_component in *@child_components
        \add_child child_component.firewall
    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

  @make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'marshal')
      \set_initial_state 'waiting'
      \declare_endless!
      \set_reporter shallow_log_reporter
      \add (State 'waiting')
        \add_transition_to 'inspecting_packet'
        \add_transition_to 'changing_epoch'
        \add_transition_to 'applying_config'
      \add (State 'inspecting_packet')
        \set_data_type [[{
          packet: Packet,
        }]]
        \add_transition_to 'analysing_marshal_identity_request'
        \add_transition_to 'analysing_declare_train_state'
        \add_transition_to 'waiting'
      \add (State 'analysing_marshal_identity_request')
        \set_data_type [[{
          packet: MarshalIdentityRequest,
        }]]
        \add_transition_to 'sending_marshal_identity_response'
      \add (State 'sending_marshal_identity_response')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          recipient_id: number,
          resp: number|string,
        }]]
        \add_transition_to 'waiting'
      \add (State 'analysing_declare_train_state')
        \set_data_type [[{
          packet: DeclareTrainState,
        }]]
        \add_transition_to 'enqueueing_declare_train_state'
      \add (State 'enqueueing_declare_train_state')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          pc_id: number,
          train_name: string,
          state: TrainState,
        }]]
        \add_transition_to 'sending_declare_train_state_response'
      \add (State 'sending_declare_train_state_response')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          recipient_id: number,
          error_reason: ?string
        }]]
        \add_transition_to 'waiting'
      \add (State 'changing_epoch')
        \set_data_type [[{
          new_epoch: number,
        }]]
        \add_transition_to 'waiting'
      \add (State 'applying_config')
        \set_data_type [[{
          config: MarshalConfig,
        }]]
        \add_transition_to 'waiting'
      \build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'waiting', @\on_waiting
      \add 'inspecting_packet', @\on_inspecting_packet
      \add 'analysing_marshal_identity_request', @\on_analysing_marshal_identity_request
      \add 'sending_marshal_identity_response', @\on_sending_marshal_identity_response
      \add 'analysing_declare_train_state', @\on_analysing_declare_train_state
      \add 'enqueueing_declare_train_state', @\on_enqueueing_declare_train_state
      \add 'sending_declare_train_state_response', @\on_sending_declare_train_state_response
      \add 'changing_epoch', @\on_changing_epoch
      \add 'applying_config', @\on_applying_config
      \build!

  step: F '() => <>', =>
    @sm_responses[@sm.state.name]!
    for child_component in *@child_components
      child_component\step!

  on_waiting: F '() => <>', =>
    event = @events\dequeue!
    if not event?
      return
    switch event.type
      when 'network-packet'
        @sm\goto 'inspecting_packet',
          packet: event.packet
      when 'new-epoch'
        @sm\goto 'changing_epoch',
          new_epoch: event.new_epoch
      when 'new-config'
        @sm\goto 'applying_config',
          config: event.config
      else
        error "internal error: unrecognised event type '#{event.type}'"

  on_inspecting_packet: F '() => <>', =>
    { :packet } = @sm.state

    forwarded = false
    for child_component in *@child_components
      if child_component.firewall\permits packet
        forwarded = true
        child_component.events\enqueue
          type: 'network-packet'
          :packet

    switch packet.protocol
      when 'MarshalIdentityRequest'
        @sm\goto 'analysing_marshal_identity_request'
          :packet
      when 'DeclareTrainState'
        @sm\goto 'analysing_declare_train_state',
          :packet
      else
        if not forwarded
          import 'shunt.spec' as :repr
          error "internal error: unhandled packet admitted through firewall: #{repr protocol}"
        @sm\goto 'waiting'

  on_analysing_marshal_identity_request: F '() => <>', =>
    {
      packet:
        :idemp_tok
        :pc_id
        :name
    } = @sm.state

    local resp
    if not name?
      resp = @pc\id!
    else if id = (@resource_orchestrator\factory name)?.pc_id
      resp = id
    else
      resp = "no known factory '#{name}'"

    @sm\goto 'sending_marshal_identity_response',
      :idemp_tok
      recipient_id: pc_id
      :resp

  on_sending_marshal_identity_response: F '() => <>', =>
    {
      :idemp_tok
      :recipient_id
      :resp
    } = @sm.state
    @uplink\send_to recipient_id, MarshalIdentityResponse idemp_tok, resp
    @sm\goto 'waiting'

  on_analysing_declare_train_state: F '() => <>', =>
    {
      packet:
        :idemp_tok
        :pc_id
        :train_name
        :state
    } = @sm.state
    @sm\goto 'enqueueing_declare_train_state',
      :idemp_tok,
      :pc_id
      :train_name
      :state

  on_enqueueing_declare_train_state: F '() => <>', =>
    {
      :idemp_tok
      :pc_id
      :train_name
      :state
    } = @sm.state

    error_reason = nil
    if state == 'cleared'
      if @resource_orchestrator\train_is_known train_name
        error_reason = 'train unknown'
      else if not @scheduler\train_is_lost train_name
        error_reason = 'train was not lost'

    @scheduler.events\enqueue
      type: 'declare-train-state'
      :train_name
      :state

    @sm\goto 'sending_declare_train_state_response',
      :idemp_tok
      recipient_id: pc_id
      :error_reason

  on_sending_declare_train_state_response: F '() => <>', =>
    {
      :idemp_tok
      :recipient_id
      :error_reason
    } = @sm.state
    @uplink\send_to recipient_id, DeclareTrainStateResponse idemp_tok, error_reason
    @sm\goto 'waiting'

  on_changing_epoch: F '() => <>', =>
    { :new_epoch } = @sm.state
    @resource_orchestrator.events\enqueue
      type: 'new-epoch'
      :new_epoch
    @sm\goto 'waiting'

  on_applying_config: F '() => <>', =>
    { :config } = @sm.state
    @config = config
    @sm\goto 'waiting'

  run: F '() => !', =>
    parallel.waitForAny table.unpack @tasks!

  tasks: F '() => [() -> !]', =>
    with {}
      if not running_tests!
        [] = @\run_steps
      [] = @\count_epochs
      [] = @\listen_to_network

  run_steps: F '() => !', =>
    while true
      @step!

      if @throttle
        os.sleep 0.001 -- Avoid CPU-hogging.
      else
        coroutine.yield!

  count_epochs: F '() => !', (initial_epoch=1)=>
    EPOCH_PERIOD = 20
    epoch = initial_epoch
    while true
      if @do_count_epochs
        @send_new_epoch_event epoch
        epoch += 1
        os.sleep EPOCH_PERIOD
      else
        coroutine.yield!

  send_new_epoch_event: F '(number) => <>', (new_epoch) =>
    @events\enqueue
      type: 'new-epoch'
      :new_epoch
    coroutine.yield!
    return

  listen_to_network: F '() => !', =>
    while true
      @read_network!

  read_network: F '() => <>', =>
    log -> "reading network..."
    _, packet = @uplink\receive_from_any!
    if not @firewall\permits packet
      return
    @events\enqueue
      type: 'network-packet'
      :packet

  ut_stop_counting_epochs: F '() => <>', =>
    @do_count_epochs = false

  ut_step: F '() => <>', =>
    @ut_step_num ??= 0
    @ut_step_num += 1
    print "--- ut_step (#{@ut_step_num}) ---"

    @ut_tasks ??= with RoundRobin!
      for task in *@tasks!
        \add task
    @ut_tasks\run_pass!

    @step!

  ut_epoch: F '() => number', =>
    @resource_orchestrator.epoch

  ut_set_epoch: F '(number) => <>', (epoch) =>
    @epoch = epoch
    assert coroutine.resume coroutine.create ->
      @send_new_epoch_event epoch
    return

  ut_factories: F '() => {string->Factory}', => @resource_orchestrator.factories

  ut_trains: F '() => {string->TrainStatus}', => @resource_orchestrator.trains

  ut_declare_train_lost: F '(string) => <>', (train_name) =>
    @scheduler.promise_tracker\ut_declare_train_lost train_name

  ut_train_is_lost: F '(string) => boolean', (train_name) =>
    @scheduler.promise_tracker\train_is_lost train_name

  ut_train_is_reserved: F '(string) => boolean', (train_name) =>
    @scheduler.promise_tracker\train_is_promised train_name

  ut_config: F '() => MarshalConfig', => @config

  ut_is_on_cooldown: F '(string, string) => boolean', (factory_name, resource) =>
    @resource_orchestrator\is_on_cooldown factory_name, resource

  ut_active: F '() => boolean', =>
    if @sm.state.name != 'waiting'
      return true
    if @events\len! > 0
      return true
    for child_component in *@child_components
      if child_component.sm.state.name != 'waiting'
        return true
      if child_component.events\len! > 0
        return true
    false

class RoundRobin
  new: F '() => <>', =>
    @task_coroutines = T '{number->thread}', {}
    @num_task_coroutines = T 'number', 0
    @started = T 'boolean', false

  add: F '(thread | () -> any) => <>', (task) =>
    assert not @started, "internal error: task added to round robin after execution commenced"

    if 'function' == type task
      task = coroutine.create task
    @num_task_coroutines += 1
    @task_coroutines[] = task

  run_pass: F '() => <>', =>
    @started = true

    all_dead = true
    for i = 1, @num_task_coroutines
      task = @task_coroutines[i]
      if 'dead' == coroutine.status task
        continue
      all_dead = false

      ok, err = coroutine.resume task
      if not ok
        error err
    if all_dead
      error 'internal error: all tasks are complete'

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.clock' as :TestClock
  import 'shunt.configurator.main' as :GetConfigRequest, :SetConfigRequest
  import 'shunt.nodes.factory.main' as :ScheduleResponse
  import 'shunt.pc' as :TestPcBackend
  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq, has_fields, len, lt, matches from matchers

  describe 'Marshal', ->
    describe '\\on_new_epoch', ->
      it 'prunes lost factories', ->
        test_phase = 'add-factories'
        stockpile =
          known:
            * name: 'minecraft:dirt'
              stored: 64
              shortage_amount: 32
          unknown:
            * name: 'minecraft:wood_sword'
              stored: 1
          estimated_capacity: 64
        EXPECTED_FACTORIES = 4

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive: -> with {}
            if test_phase == 'global-disconnect'
              return {}

            stations = F '(number) -> DetectedStations', (i) ->
              switch test_phase
                when 'add-factories'
                  known =
                    * name: "station_#{3 * i}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                    * name: "station_#{3 * i + 1}"
                      network: 'network_2'
                      type: 'inbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                  :known, unknown: {}
                when 'change-factory-stations'
                  known =
                    * name: "station_#{3 * i}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                    * name: "station_#{3 * i + 2}"
                      network: 'network_3'
                      type: 'inbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                  :known, unknown: {}
                else
                  error "internal error: unrecognised test phase #{test_phase}"
            for i = 1, EXPECTED_FACTORIES
              [] =
                from_id: i
                packet: FactoryHeartbeat i, "factory_#{i}", (stations i), stockpile

        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for i = 1, 13
            \ut_step!

          epoch = \ut_epoch!
          factories = \ut_factories!
          $assert_that factories.factory_1, has_fields
            name: eq 'factory_1'
            pc_id: eq 1
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq 'station_3'
                * has_fields name: eq 'station_4'
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_2, has_fields
            name: eq 'factory_2'
            pc_id: eq 2
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_6"
                * has_fields name: eq "station_7"
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_3, has_fields
            name: eq 'factory_3'
            pc_id: eq 3
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_9"
                * has_fields name: eq "station_10"
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_4, has_fields
            name: eq 'factory_4'
            pc_id: eq 4
            last_seen_epoch: eq epoch
            stations: has_fields {}
              known: has_fields
                * has_fields name: eq "station_12"
                * has_fields name: eq "station_13"
              unknown: len eq 0
            stockpile: deep_eq stockpile

          test_phase = 'change-factory-stations'
          uplink.backend\reset!
          for _ = 1, 13
            \ut_step!

          factories = \ut_factories!
          $assert_that factories.factory_1, has_fields
            name: eq 'factory_1'
            pc_id: eq 1
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_3"
                * has_fields name: eq "station_5"
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_2, has_fields
            name: eq 'factory_2'
            pc_id: eq 2
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_6"
                * has_fields name: eq "station_8"
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_3, has_fields
            name: eq 'factory_3'
            pc_id: eq 3
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_9"
                * has_fields name: eq "station_11"
              unknown: len eq 0
            stockpile: deep_eq stockpile
          $assert_that factories.factory_4, has_fields
            name: eq 'factory_4'
            pc_id: eq 4
            last_seen_epoch: eq epoch
            stations: has_fields
              known: has_fields
                * has_fields name: eq "station_12"
                * has_fields name: eq "station_14"
              unknown: len eq 0
            stockpile: deep_eq stockpile

          test_phase = 'global-disconnect'
          uplink.backend\reset!
          \ut_set_epoch 10
          for _ = 1, 3
            \ut_step!

          $expect_that \ut_factories!, deep_eq {}

    it 'respects the scheduler', ->
      -- TODO(kcza): test valid schedules are made
      -- - Ensure correct network
      -- - Ensure correct resource handling
      -- - Ensure correct in/outbound handling
      -- - MAYBE Run many times, shim `pick` to ensure progression

    describe '\\on_declare_train_state', ->
      it 'handles lost and not lost trains', ->
        idemp_tok = IdempotenceToken!

        PC_ID = 1
        TRAIN_NAME = 'some-train-name'

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'cleared'
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'cleared'
        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_declare_train_lost TRAIN_NAME
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq true

          for _ = 1, 6
            \ut_step!
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq false
          $assert_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

          for _ = 1, 4
            \ut_step!
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq false
          $assert_that uplink.backend.sent, len eq 2
          $expect_that uplink.backend.sent[2], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: matches 'was not lost'
            protocol: eq DeclareTrainStateResponse::protocol!

      it 'handles train reservations', ->
        idemp_tok = IdempotenceToken!

        PC_ID = 1
        TRAIN_NAME = 'some-train-name'

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'reserved'
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'reserved'

        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          $assert_that (\ut_train_is_reserved TRAIN_NAME), eq false

          for _ = 1, 5
            \ut_step!
          $assert_that (\ut_train_is_reserved TRAIN_NAME), eq true
          $assert_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

          -- Check re-declarations are ignored
          for _ = 1, 5
            \ut_step!
          $assert_that uplink.backend.sent, len eq 2
          $expect_that uplink.backend.sent[2], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

    describe '\\on_marshal_identity_request', ->
      it 'responds to marshal requests', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID
        pc = Pc TestPcBackend
          id: => MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for _ = 1, 4
            \ut_step!

        $expect_that uplink.backend.sent, len eq 1
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: eq MARSHAL_PC_ID
          protocol: eq MarshalIdentityResponse::protocol!

      it 'responds to factory requests', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        FACTORY_NAME = 'factory'
        FACTORY_PC_ID = 12345

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID, FACTORY_NAME
            * from_id: FACTORY_PC_ID
              packet: do
                stations =
                  known: {}
                  unknown: {}
                stockpile =
                  known: {}
                  unknown: {}
                  estimated_capacity: 0
                FactoryHeartbeat FACTORY_PC_ID, FACTORY_NAME, stations, stockpile
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID, FACTORY_NAME

        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for _ = 1, 10
            \ut_step!

        $expect_that uplink.backend.sent, len eq 2
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: matches 'no known factory'
          protocol: eq MarshalIdentityResponse::protocol!
        $expect_that uplink.backend.sent[2], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: eq FACTORY_PC_ID
          protocol: eq MarshalIdentityResponse::protocol!

    describe '\\on_get_config_request', ->
      it 'responds correctly', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 1
        RAW = '[config]\n'

        config =
          <raw>: RAW
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: GetConfigRequest idemp_tok, REQUESTER_PC_ID
        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for _ = 1, 5
            \ut_step!

        $expect_that uplink.backend.sent, len eq 1
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            raw: eq RAW
          protocol: eq GetConfigResponse::protocol!

    describe '\\on_set_config_request', ->
      it 'applies valid config', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        NEW_RAW = [[
          [marshal]
          key = 'value'
        ]]

        config =
          <raw>: ''
          marshal: {}
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: SetConfigRequest idemp_tok, REQUESTER_PC_ID, NEW_RAW

        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for _ = 1, 8
            \ut_step!

          $expect_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq REQUESTER_PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              resp: eq nil
            protocol: eq SetConfigResponse::protocol!
          $expect_that \ut_config!, deep_eq
            marshal:
              key: 'value'
          $expect_that \ut_config!.<raw>, eq NEW_RAW

      it 'rejects invalid config', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        NEW_RAW = '[invalid-config]\n'
        ORIGINAL_RAW = [[
          [marshal]
        ]]

        config =
          <raw>: ORIGINAL_RAW
          marshal: {}
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: SetConfigRequest idemp_tok, REQUESTER_PC_ID, NEW_RAW
        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for _ = 1, 5
            \ut_step!

          $expect_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq REQUESTER_PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: matches 'at field %.marshal'
            protocol: eq SetConfigResponse::protocol!
          $expect_that \ut_config!, deep_eq config -- Unchanged
          $expect_that \ut_config!.<raw>, eq ORIGINAL_RAW

    it 'avoids spam', ->
      RESOURCE = 'minecraft:dirt'
      shortage_stations =
        known:
          * name: 'shortage_station'
            network: 'mainline'
            type: 'inbound'
            handles: RESOURCE
            capacity: 1
            present_trains:
              * 'train'
        unknown: {}
      shortage_stockpile =
        known:
          * name: RESOURCE
            stored: 0
            shortage_amount: 64
        unknown: {}
        estimated_capacity: 64
      shortage_factory =
        name: 'shortage_factory'
        pc_id: 1
        last_seen_epoch: 0
        last_seen_epoch: 0
        stations: shortage_stations
        stockpile: shortage_stockpile
      shortage_heartbeat = FactoryHeartbeat shortage_factory.pc_id,
        shortage_factory.name,
        shortage_stations,
        shortage_stockpile

      surplus_stations =
        known:
          * name: 'surplus_station'
            network: 'mainline'
            type: 'outbound'
            handles: RESOURCE
            capacity: 1
            present_trains:
              * 'train'
        unknown: {}
      surplus_stockpile =
        known:
          * name: RESOURCE
            stored: 128
            surplus_amount: 64
        unknown: {}
        estimated_capacity: 128
      surplus_factory =
        name: 'surplus_factory'
        pc_id: 1
        last_seen_epoch: 0
        last_seen_epoch: 0
        stations: surplus_stations
        stockpile: surplus_stockpile
      surplus_heartbeat = FactoryHeartbeat surplus_factory.pc_id,
        surplus_factory.name,
        surplus_stations,
        surplus_stockpile

      test_phase = 'setup'
      uplink = Uplink do
        schedule_request_pc_id = nil
        schedule_request_idemp_tok = nil
        TestUplinkBackend
          on_send: (pc_id, pkt, protocol) =>
            if protocol == 'ScheduleRequest'
              schedule_request_pc_id = pc_id
              schedule_request_idemp_tok = pkt.idemp_tok
            true
          on_receive: (protocol_filter, _) =>
            if schedule_request_pc_id?
              assert schedule_request_idemp_tok?, 'schedule request idemp tok not set'

              pc_id = schedule_request_pc_id
              schedule_request_pc_id = nil

              idemp_tok = schedule_request_idemp_tok
              schedule_request_idemp_tok = nil

              pkt = ScheduleResponse idemp_tok, nil
              return pc_id, pkt, pkt.protocol
            nil, nil, nil
          to_receive: ->
            with {}
              switch test_phase
                when 'setup'
                  [] =
                    from_id: surplus_heartbeat.pc_id
                    packet: surplus_heartbeat
                  [] =
                    from_id: shortage_heartbeat.pc_id
                    packet: shortage_heartbeat
                when 'spam-trigger'
                  [] =
                    from_id: shortage_heartbeat.pc_id
                    packet: shortage_heartbeat
                else
                  error "internal error: unknown test phase '#{test_phase}'"

      RESOURCE = 'minecraft:dirt'

      resend_cooldown_seconds = 4096
      config =
        <raw>: ''
        marshal:
          :resend_cooldown_seconds

      rand = PseudoRandom 12345
      clock = TestClock!
      pc = Pc TestPcBackend
        id: => 0
      marshal = Marshal
        :config
        :pc
        :uplink
        :rand
        :clock
      marshal\ut_stop_counting_epochs!

      candidates = F '() -> [Schedule]', ->
        uplink.backend\reset!

        reached_inactivity = false
        for i = 1, 25
          marshal\ut_step!
          if not marshal\ut_active!
            reached_inactivity = true
            break
        $assert_that reached_inactivity, eq true

        with {}
          for { :protocol, packet: :schedule } in *uplink.backend.sent
            if protocol == 'ScheduleRequest'
              [] = schedule

      $assert_that #candidates!, eq 1
      $expect_that #candidates!, eq 0
      marshal.scheduler\ut_break_all_promises!
      $expect_that #candidates!, eq 0
      $assert_that (marshal\ut_is_on_cooldown shortage_factory.name, RESOURCE), eq true

      marshal.resource_orchestrator\ut_release_all_cooldowns!
      marshal.scheduler\ut_break_all_promises!
      $assert_that #candidates!, eq 1
      $expect_that #candidates!, eq 0

      marshal.scheduler\ut_break_all_promises!
      $assert_that #candidates!, eq 0
      clock.time += resend_cooldown_seconds
      $expect_that #candidates!, eq 1
