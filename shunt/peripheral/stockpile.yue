local *

import 'shunt.logger' as :log
import 'shunt.quicktype' as :declare_type, :F, :T
import 'shunt.spec' as :spec

declare_type 'SlotData', [[{
  name: string,
  count: number,
}]]
declare_type 'SlotContent', [[{
  displayName: string,
  count: number,
}]]

declare_type 'Stockpile', [[{
  content: () => StockpileContent,
}]]
export class Stockpile
  new: F '([Inventory]) => <>', (@inventories) =>

  content: F '() => StockpileContent', =>
    log -> "gathering stockpile info from #{#@inventories} inventories"
    estimated_capacity = 0
    stored_items_by_name = {}
    for inventory in *@inventories
      estimated_capacity += inventory\gather_content stored_items_by_name

    stored_items = [ content for _, content in pairs stored_items_by_name ]
    table.sort stored_items, (a, b) ->
      a.name < b.name
    :stored_items, :estimated_capacity

declare_type 'Inventory', [[{
  gather_content: ({string->StoredItemInfo}) => number,
}]]
declare_type 'InventoryBackend', [[{
  size: () => number,
  slot_content: (number) => ?SlotContent,
  slot_capacity: (number) => number,
}]]
export class Inventory
  new: F '(InventoryBackend) => <>', (@backend) =>

  gather_content: F '({string->StoredItemInfo}) => number', (stored_items_by_name) =>
    total_populated_capacity = 0
    populated_slots = 0
    num_slots = @backend\size!
    slot_data = @backend\list!
    with stored_items_by_name
      for i = 1, num_slots
        slot = slot_data[i]
        if not slot?
          continue
        populated_slots += 1
        total_populated_capacity += @backend\slot_capacity i

        name = slot.name
        [name] ??= T 'StoredItemInfo',
          :name
          stored: 0
        with [name]
          .stored += slot.count

    if populated_slots == 0
      return 64 * num_slots
    total_populated_capacity * num_slots / populated_slots

declare_type 'StockpileContent', [[{
  stored_items: [StoredItemInfo],
  estimated_capacity: number,
}]]
declare_type 'StoredItemInfo', [[{
  name: string,
  stored: number,
}]]
export class MinecraftBackend
  @find: F '() => [InventoryBackend]', =>
    inventory_peripherals = { peripheral.find 'inventory' }
    [ MinecraftBackend peripheral for peripheral in *inventory_peripherals]

  new: (@inventory) =>

  size: F '() => number', =>
    @inventory.size!

  list: F '() => {number->SlotData}', =>
    @inventory.list!

  slot_content: F '(number) => ?SlotContent', (slot_id) =>
    @inventory.getItemDetail slot_id

  slot_capacity: F '(number) => number', (slot_id) =>
    @inventory.getItemLimit slot_id

declare_type 'TestInventoryBackendOpts', [[{
  size: ?() => number,
  list: ?() => {number->SlotData},
  slot_content: ?(number) => ?SlotContent,
  slot_capacity: ?(number) => number,
}]]
export class TestInventoryBackend
  new: F '(?TestInventoryBackendOpts) => <>', (opts={}) =>
    {
      :size=-> error 'size unimplemented'
      :list=-> error 'list unimplemented'
      :slot_content=-> error 'slot_content unimplemented'
      :slot_capacity=-> error 'slot_capacity unimplemented'
    } = opts
    @size = F '() => number', size
    @list = F '() => {number->SlotData}', list
    @slot_content = F '(number) => ?SlotContent', slot_content
    @slot_capacity = F '(number) => number', slot_capacity

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq, errors, gt, has_fields, le, lt, matches from matchers

  describe 'Stockpile', ->
    describe '\\content', ->
      it 'returns all content', ->
        name1 = 'minecraft:diamond_axe'
        name2 = 'minecraft:enchanting_table'
        name3 = 'minecraft:fishing_rod'
        inventory1 = Inventory TestInventoryBackend
          size: => 4
          list: =>
            with {}
              for i = 1, @size!
                name = if i % 2 == 1
                  name1
                else
                  name2
                [i] = :name, count: 16 * i
          slot_capacity: (slot_id) =>
            32 * slot_id
        inventory2 = Inventory TestInventoryBackend
          size: => 4
          list: =>
            with {}
              for i = 1, @size!
                name = if i % 2 == 1
                  name2
                else
                  name3
                [i] = :name, count: 3 + 16 * i
          slot_capacity: (slot_id) =>
            3 + 32 * slot_id
        stockpile = Stockpile
          * inventory1
          * inventory2

        content = stockpile\content!
        $expect_that content, has_fields
          estimated_capacity: eq 0 +
            32 * (1 + 3) +
            32 * (1 + 2 + 3 + 4) + 3 * 2 +
            32 * (2 + 4) + 3 * 2
          stored_items: deep_eq
            * name: name1
              stored: 16 * (1 + 3)
            * name: name2
              stored: 16 * (1 + 2 + 3 + 4) + 3 * 2
            * name: name3
              stored: 16 * (2 + 4) + 3 * 2

      it 'estimates remaining capacity', ->
        inventory = Inventory TestInventoryBackend
          size: => 3
          list: =>
            with {}
              [1] = name: 'minecraft:oak_planks', count: 16
              [2] = name: 'minecraft:oak_sign', count: 32
              [3] = nil
          slot_capacity: (slot_id) =>
            switch slot_id
              when 1
                64
              when 2
                16
              when 3
                64
              else
                error "internal error: unexpected slot_id: #{slot_id}"
        stockpile = Stockpile
          * inventory

        content = stockpile\content!
        $expect_that content, has_fields
          estimated_capacity: gt 64 + 16
        $expect_that content, has_fields
          estimated_capacity: lt 64 * 3

      it 'estimates empty stockpiles', ->
        SIZE = 10
        inventory = Inventory TestInventoryBackend
          size: => SIZE
          list: => {}
        stockpile = Stockpile
          * inventory

        content = stockpile\content!
        $expect_that content, has_fields
          estimated_capacity: gt 0
        $expect_that content, has_fields
          estimated_capacity: le 64 * SIZE
