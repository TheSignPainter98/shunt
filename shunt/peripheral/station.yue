local *

import 'shunt.quicktype' as :declare_type, :F
import 'shunt.spec' as :spec

declare_type 'StationBackend', [[{
  name: () => StationName,
  set_name: (StationName) => <>,
  train_present: () => boolean,
  train_enroute: () => boolean,
  train_has_schedule: () => ?boolean,
  train_schedule: () => ?Schedule,
  train_set_schedule: (Schedule) => boolean,
  train_name: () => ?string,
}]]
declare_type 'StationName', 'string'
declare_type 'Schedule', [[{
  cyclic: boolean,
  entries: [ScheduleEntry],
}]]
declare_type 'ScheduleEntry', [=[{
  instruction: {
    id: "create:destination",
    data: { text: string },
  },
  conditions: [[{
    id: "create:idle"|"create:delay",
    data: {
      value: number,
      time_unit: TimeUnit,
    },
  }]]
}]=]
declare_type 'TimeUnit', '0|1|2'
declare_type 'Resource', [[{
  id: () => string,
  kind: () => "cargo"|"player"
}]]

declare_type 'Station', [[{
  name: () => StationName,
  train_name: () => ?string,
  apply_schedule: (Schedule) => boolean,
}]]
declare_type 'StationInfo', [[{
  name: StationName,
  train_name: ?string,
}]]
export class Station
  new: F '(?StationBackend) => <>', (@backend) =>

  validate: F '() => ?string', =>
    if @name! == 'Track Station'
      return 'cannot use default station name "Track Station", please manually rename it'
    nil

  name: F '() => StationName', =>
    @backend\name!

  train_name: F '() => ?string', =>
    @backend\train_name!

  info: F '() => StationInfo', =>
    with {}
      .name = @backend\name!
      .train_name = @backend\train_name!

  apply_schedule: F '(Schedule) => boolean', (schedule) =>
    @backend\train_set_schedule schedule

export time_units =
  TICKS: 0
  SECONDS: 1
  MINUTES: 2
CARGO_INACTIVE_CONDITION =
  id: "create:idle"
  data:
    value: 5
    time_unit: time_units.SECONDS
CARGO_INACTIVE_TIMEOUT =
  id: "create:delay"
  data:
    value: 15
    time_unit: time_units.SECONDS
OVERALL_TIMEOUT =
  id: "create:delay"
  data:
    value: 30
    time_unit: time_units.SECONDS

declare_type 'StationPeripheral', [[{
  getStationName: () => StationName,
}]]
export class MinecraftBackend
  @find: F '() => [StationBackend]', =>
    station_peripherals = { peripheral.find 'Create_Station' }
    [ MinecraftBackend peripheral for peripheral in *station_peripherals ]

  new: F '(StationPeripheral) => <>', (@station) =>

  name: F '() => StationName', =>
    @station.getStationName!

  set_name: F '(StationName) => <>', (name) =>
    @station.setStationName name

  train_present: F '() => boolean', =>
    @station.isTrainPresent!

  train_enroute: F '() => boolean', =>
    @station.isTrainEnroute!

  train_has_schedule: F '() => ?boolean', =>
    ret = nil
    try
      ret = @station.hasSchedule!
    catch _
      -- Ignore
    return ret

  train_schedule: F '() => ?Schedule', =>
    schedule = nil
    try
      schedule = @station.getSchedule!
    catch _
      -- Ignore
    return schedule

  train_set_schedule: F '(Schedule) => boolean', (schedule) =>
    local ret
    try
      @station.setSchedule schedule
      ret = true
    catch _
      ret = false
    return ret

  train_name: F '() => ?string', =>
    name = nil
    try
      name = @station.getTrainName!
    catch err
      -- Ignore
    name

declare_type 'TestStationBackendOpts', [[{
  name: ?() => StationName,
  set_name: ?(StationName) => <>,
  train_present: ?() => boolean,
  train_enroute: ?() => boolean,
  train_has_schedule: ?() => ?boolean,
  train_schedule: ?() => ?Schedule,
  train_set_schedule: ?(Schedule) => boolean,
  train_name: ?() => ?string,
}]]
export class TestStationBackend
  new: F '(?TestStationBackendOpts) => <>', (opts={}) =>
    {
      :name=-> error 'name unimplemented'
      :set_name=-> error 'set_name unimplemented'
      :train_present=-> error 'train_present unimplemented'
      :train_enroute=-> error 'train_enroute unimplemented'
      :train_has_schedule=-> error 'train_has_schedule unimplemented'
      :train_schedule=-> error 'train_schedule unimplemented'
      :train_set_schedule=-> error 'train_set_schedule unimplemented'
      :train_name=-> error 'train_name unimplemented'
    } = opts
    @name = F '() => StationName', name
    @set_name = F '(StationName) => <>', set_name
    @train_present = F '() => boolean', train_present
    @train_enroute = F '() => boolean', train_enroute
    @train_has_schedule = F '() => ?boolean', train_has_schedule
    @train_schedule = F '() => ?Schedule', train_schedule
    @train_set_schedule = F '(Schedule) => boolean', train_set_schedule
    @train_name = F '() => ?string', train_name

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.quicktype' as :T
  import 'shunt.spec' as :describe, :it, :matchers

  import anything, errors, no_errors from matchers

  describe 'Station', ->
    describe '\\apply_schedule', ->
      it 'accepts valid schedules', ->
        station = Station TestStationBackend
          train_set_schedule: (schedule) =>
            T 'Schedule', schedule
            return true

        valid_schedule =
          cyclic: false
          entries:
            * instruction:
                id: 'create:destination'
                data: text: 'from-station'
              conditions:
                * { CARGO_INACTIVE_CONDITION, CARGO_INACTIVE_TIMEOUT }
                * { OVERALL_TIMEOUT }
            * instruction:
                id: 'create:destination'
                data: text: 'to-station'
              conditions:
                * { CARGO_INACTIVE_CONDITION, CARGO_INACTIVE_TIMEOUT }
                * { OVERALL_TIMEOUT }
        $expect_that (-> station\apply_schedule valid_schedule), no_errors!

      it 'rejects invalid schedules', ->
        invalid_schedules =
          * {}
          * { cyclic: '123' }
          * { cyclic: false, entries: {} }
          * { cyclic: false, entries: {{}} }
          * { cyclic: false, entries: {{instruction: 'asdf'}} }
          * { cyclic: false, entries: {{instruction: {id: 'asdf'}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: 'asdf'}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: false}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'asdf'}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle'}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle', data: {}}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle', data: {value: 'asdf'}}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle', data: {value: 5}}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle', data: {value: 5, time_unit: 'asdf'}}}}} }
          * { cyclic: false, entries: {{instruction: {id: 'create:destination', data: text: 'station'}, conditions: {{id: 'create:idle', data: {value: 5, time_unit: -1}}}}} }
        for invalid_schedule in *invalid_schedules
          $expect_that (-> station\apply_schedule invalid_schedule), errors anything!

      it 'applies the given schedule in world', ->
        if not _G.skip_minecraft_tests
          return
