local *

import 'shunt.data.queue' as :Queue
import 'shunt.firewall' as :Firewall
import 'shunt.logger' as :log, :trace
import 'shunt.quicktype' as :declare_type, :F, :T
import 'shunt.state' as :shallow_log_reporter, :State, :StateMachineBuilder, :StateResponsesBuilder
import 'shunt.upgrade.instigator' as :MarshalBumpRelease
import 'shunt.upgrade.monitor' as :CurrentReleaseRequest, :CurrentReleaseResponse
import 'shunt.upgrade.rebooter' as :MinecraftRebooter, :RebootRequest
import 'shunt.upgrade.tester' as :Tester
import 'shunt.version' as :VERSION

declare_type 'UpgradeListener', 'NetworkComponent'
declare_type 'UpgradeListenerKind', '"leader"|"follower"'
declare_type 'UpgradeListenerEvent', [[{
  type: "network-packet",
  packet: Packet,
}]]
declare_type 'UpgradeListenerOpts', [[{
  config: UpgradeListenerConfig,
  uplink: Uplink,
  rebooter: ?Rebooter,
}]]
declare_type 'UpgradeListenerConfig', [[{
  marshal: ?{},
}]]
export class UpgradeListener using Tester
  new: F '(UpgradeListenerOpts) => <>', (opts) =>
    {
      :config
      :uplink
      :rebooter=MinecraftRebooter!
    } = opts
    @config = config
    @uplink = uplink
    @rebooter = rebooter

    @kind = T 'UpgradeListenerKind', if config.marshal?
      'leader'
    else
      'follower'
    @_current_release = T '?Release', nil

    @firewall = Firewall
      * CurrentReleaseRequest
      * MarshalBumpRelease
      * RebootRequest
    @events = Queue 'UpgradeListenerEvent'
    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

  @make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'upgrade_listener')
      \set_initial_state 'waiting'
      \set_reporter shallow_log_reporter
      \add (State 'waiting')
        \add_transition_to 'inspecting_packet'
      \add (State 'inspecting_packet')
        \set_data_type [[{
          packet: Packet,
        }]]
        \add_transition_to 'analysing_current_release_request'
        \add_transition_to 'analysing_reboot_request'
        \add_transition_to 'analysing_update'
      \add (State 'analysing_current_release_request')
        \set_data_type [[{
          packet: CurrentReleaseRequest,
        }]]
        \add_transition_to 'sending_current_release_response'
      \add (State 'sending_current_release_response')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          recipient_id: number,
          current_release: Release,
        }]]
        \add_transition_to 'waiting'
      \add (State 'analysing_reboot_request')
        \set_data_type [[{
          packet: RebootRequest,
        }]]
        \add_transition_to 'rebooting'
      \add (State 'analysing_update')
        \set_data_type [[{
          packet: MarshalBumpRelease,
        }]]
        \add_transition_to 'testing_update'
      \add (State 'testing_update')
        \set_data_type [[{
          instigator_id: number,
          release: Release,
        }]]
        \add_transition_to 'applying_update'
        \add_transition_to 'rejecting_update'
      \add (State 'applying_update')
        \set_data_type [[{
          release: Release,
        }]]
        \add_transition_to 'broadcasting_reboot'
      \add (State 'broadcasting_reboot')
        \add_transition_to 'rebooting'
      \add (State 'rejecting_update')
        \set_data_type [[{
          instigator_id: number,
          cause: string,
        }]]
        \add_transition_to 'waiting'
      \add (State 'rebooting')
        \declare_end_state!
      \build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'waiting', @\on_waiting
      \add 'inspecting_packet', @\on_inspecting_packet
      \add 'analysing_current_release_request', @\on_analysing_current_release_request
      \add 'sending_current_release_response', @\on_sending_current_release_response
      \add 'analysing_reboot_request', @\on_analysing_reboot_request
      \add 'analysing_update', @\on_analysing_update
      \add 'testing_update', @\on_testing_update
      \add 'applying_update', @\on_applying_update
      \add 'broadcasting_reboot', @\on_broadcasting_reboot
      \add 'rejecting_update', @\on_rejecting_update
      \add 'rebooting', @\on_rebooting
      \build!

  step: F '() => <>', =>
    @sm_responses[@sm.state.name]!

  on_waiting: F '() => <>', =>
    event = @events\dequeue!
    if not event?
      return
    switch event.type
      when 'network-packet'
        @sm\goto 'inspecting_packet',
          packet: event.packet
      else
        error "internal error: unrecognised event type '#{event.type}'"

  on_inspecting_packet: F '() => <>', =>
    { :packet } = @sm.state
    switch packet.protocol
      when 'CurrentReleaseResponse'
        @sm\goto 'analysing_current_release_request',
          :packet
      when 'RebootRequest'
        @sm\goto 'analysing_reboot_request',
          :packet
      when 'MarshalBumpRelease'
        @sm\goto 'analysing_update',
          :packet
      else
        error "internal error: unrecognised protocol '#{event.type}'"

  on_analysing_current_release_request: F '() => <>', =>
    {
      packet:
        :idemp_tok
        :pc_id
    } = @sm.state
    current_release = @current_release!
    @sm\goto 'sending_current_release_response',
      :idemp_tok
      recipient_id: pc_id
      :current_release

  current_release: F '() => Release', =>
    if @kind != 'leader'
      error 'internal error: non-leader requested current release'
    if @_current_release?
      return @_current_release

    content = do
      with assert io.open 'shunt', 'r'
        content = assert \read '*a'
        assert \close!
      content
    @_current_release = T 'Release',
      file: 'shunt'
      version: VERSION
      :content
    @_current_release

  on_sending_current_release_response: F '() => <>', =>
    {
      :idemp_tok
      :recipient_id
      :current_release
    } = @sm.state
    @uplink\send_to recipient_id, CurrentReleaseResponse idemp_tok, current_release
    @sm\goto 'waiting'

  on_analysing_reboot_request: F '() => <>', =>
    { :packet } = @sm.state
    assert packet -- unused.
    @sm\goto 'rebooting'

  on_analysing_update: F '() => <>', =>
    {
      packet:
        :pc_id
        :release
    } = @sm.state
    @sm\goto 'testing_update',
      instigator_id: pc_id
      :release

  on_testing_update: F '() => <>', =>
    { :instigator_id, :release } = @sm.state
    if #release.content > fs.getFreeSpace '/'
      @sm\goto 'rejecting_update',
        :instigator_id
        cause: "cannot upgrade: too little space, need #{#release.content}, but only #{fs.getFreeSpace '/'}/#{fs.getCapacity '/'} available"
      return

    ok, err = @test release
    if not ok
      @sm\goto 'rejecting_update',
        :instigator_id
        cause: "cannot upgrade: #{err}"
      return

    @sm\goto 'applying_update',
      :release

  on_applying_update: F '() => <>', =>
    { :release } = @sm.state

    @_current_release = release
    with assert io.open release.file, 'w+'
      assert \write release.content
      assert \close!

    @sm\goto 'broadcasting_reboot'

  on_broadcasting_reboot: F '() => <>', =>
    @uplink\deafen!
    @uplink\broadcast RebootRequest!
    @sm\goto 'rebooting'

  on_rejecting_update: F '() => <>', =>
    { :instigator_id, :cause } = @sm.state
    @uplink\send_to instigator_id, UpdateRejection cause
    @sm\goto 'waiting'

  on_rebooting: F '() => <>', =>
    @rebooter\reboot!
