local *
local MarshalBumpRelease

import 'shunt.logger' as :fatal, :log
import 'shunt.peripheral.uplink' as :IdempotenceToken, :Packet, :TIMEOUT, :Uplink
import 'shunt.quicktype' as :declare_type, :F
import 'shunt.spec' as :spec
import 'shunt.upgrade.rebooter' as :MinecraftRebooter, :RebootRequest
import 'shunt.upgrade.tester' as :Tester

declare_type 'InstigatorOpts', [[{
  config: ?{},
  pc: Pc,
  rebooter: ?Rebooter,
  release: Release,
  uplink: ?Uplink,
}]]
export class Instigator using Tester
  new: F '(InstigatorOpts) => <>', (opts) =>
    {
      :config
      :pc
      :release
      :uplink=Uplink!
      :rebooter=MinecraftRebooter!
    } = opts
    @config = config
    @pc = pc
    @release = release
    @uplink = uplink
    @rebooter = rebooter

    if config?.marshal?
      fatal 'cannot instigate upgrade from marshal'

  upgrade: F '(?"no-prompt") => <>', (prompt) =>
    assert @test @release

    if prompt != 'no-prompt'
      local resp
      while resp != ''
        print "ready to upgrade to version #{@release.version}"
        print 'press [ENTER] to deploy'
        resp = io.read '*l'
    @bump_marshal @release

    if @await_reboot_request!
      @reboot!

  bump_marshal: F '(Release) => <>', (release) =>
    log -> 'bumping marshal...'
    @uplink\broadcast MarshalBumpRelease release, @pc\id!
    return

  await_reboot_request: F '() => boolean', =>
    log -> 'awaiting reboot request...'
    MAX_ATTEMPTS = 3
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "awaiting reboot request (attempt #{i}/#{MAX_ATTEMPTS})"

      ok, err = @uplink\receive_from_any RebootRequest, timeout: 5
      if ok
        return true
      if err != TIMEOUT
        fatal err
    print "marshal did not issue reboot request"
    false

  reboot: F '() => !', =>
    @rebooter\reboot!

export class MarshalBumpRelease extends Packet
  new: F '(Release, number) => <>', (@release, @pc_id) =>
    super!

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.pc' as :Pc, :TestPcBackend
  import 'shunt.peripheral.uplink' as :TestUplinkBackend
  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq, errors, has_fields, len, matches from matchers

  class TestRebooter
    @marker: 'REBOOTING'

    reboot: =>
      error @@marker

  describe 'Instigator', ->
    it 'instigates valid updates', ->
      config = {}
      release =
        file: 'shunt'
        version: '9999999999999999'
        content: ''
      PC_ID = 12345

      last_idemp_tok = nil
      uplink = Uplink TestUplinkBackend
        to_receive:
          * from_id: 1
            packet: RebootRequest!
        on_send: (id, packet, protocol) =>
          last_idemp_tok = packet.idemp_tok
          true

      pc = Pc TestPcBackend
        id: => PC_ID
      rebooter = TestRebooter!
      upgrader = Instigator
        :config
        :pc
        :rebooter
        :release
        :uplink
      $expect_that (-> upgrader\upgrade 'no-prompt'), errors matches TestRebooter.marker

      $expect_that uplink.backend.sent, len eq 0
      $expect_that uplink.backend.broadcasted, len eq 1
      $expect_that uplink.backend.broadcasted[1], has_fields
        protocol: eq 'MarshalBumpRelease'
        packet: has_fields
          protocol: eq 'MarshalBumpRelease'
          pc_id: eq PC_ID
          release: deep_eq release
