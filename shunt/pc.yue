local *

import 'shunt.quicktype' as :declare_type, :F
import 'shunt.spec' as :spec

declare_type 'Pc', [[{
  id: () => number,
  name: () => ?string,
}]]
declare_type 'PcBackend', 'Pc'
export class Pc
  new: F '(?PcBackend) => <>', (@backend=MinecraftBackend!) =>

  id: F '() => number', =>
    @backend\id!

  name: F '() => ?string', =>
    @backend\name!

  set_name: F '(string) => <>', (name) =>
    @backend\set_name name

class MinecraftBackend
  id: F '() => number', =>
    os.getComputerID!

  name: F '() => ?string', =>
    os.getComputerLabel!

  set_name: F '(string) => <>', (name) =>
    os.setComputerLabel name

declare_type 'TestPcBackendOpts', [[{
  id: ?() => number,
  name: ?() => ?string,
  set_name: ?(string) => <>,
}]]

export class TestPcBackend
  new: F '(?TestPcBackendOpts) => <>', (opts={}) =>
    {
      :id=-> error 'id unimplemented'
      :name=-> error 'name unimplemented'
      :set_name=-> error 'set_name unimplemented'
    } = opts
    @id = F '() => number', id
    @name = F '() => string', name
    @set_name = F '(string) => <>', set_name

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.spec' as :describe, :it, :matchers

  import eq from matchers

  describe 'Pc', ->
    it 'reports its id', ->
      ID = 54321
      pc = Pc TestPcBackend
        id: => ID
      $expect_that pc\id!, eq ID

    it 'reports its name', ->
      NAME = 'test-pc-name'
      pc = Pc TestPcBackend
        name: => NAME
      $expect_that pc\name!, eq NAME
