local *

detect_host = ->
  if collectgarbage?
    'native'
  else
    'minecraft'
export HOST = detect_host!
export LUA = 'luajit'

compat_applied = false
export apply_compat = ->
  compat_applied = true

  table.unpack ??= assert unpack, 'internal error: cannot find unpack function'

  os.sleep ??= (n_secs) ->
    os.execute "sleep #{n_secs}s"

  os.tmpname ??= ->
    while true
      f = "lua_#{'%x'\format math.random 1, 100000}"
      with? io.open f, 'r'
        \close!
        continue
      return f

  os.remove ??= (path) ->
    try
      fs.delete path
      return true
    catch _
      return false

  os.rename ??= (src, dest) ->
    fs.move src, dest

  os.exit ??= (code) ->
    error "EXIT(#{code})"

  if not fs?
    global fs = {}

  fs.makeDir ??= (path) ->
    os.execute "mkdir -p '#{path}'"

  fs.getFreeSpace ??= (path) ->
    1000000

  fs.getCapacity ??= (path) ->
    1000000

  fs.list ??= (dir) ->
    assert (not dir\match "'"), "cannot list directory containing quote mark '#{dir}'"
    with {}
      p = assert io.popen "ls -1 '#{dir}'"
      line = p\read '*l'
      while line?
        [] = line
        line = p\read '*l'
      p\close!

  if not shell?
    global shell = {}

  shell.execute ??= (...) ->
    for i = 1, select '#', ...
      assert 'string' == type select i, ...

    args = [ "'#{arg}'" for arg in *{ LUA, ... } ]
    rc = os.execute table.concat args, ' '
    rc == 0

  bit.lshift ??= bit.blshift

export test_compat = ->
  if not compat_applied
    error 'call apply_compat before testing compat'
  tests =
    * name: 'os.tmpname returns a string'
      check: ->
        assert 'string' == type os.tmpname!
    * name: 'os.remove removes files',
      check: ->
        TEST_FILE = '.test_file_hj4k3h5jio'
        with? io.open TEST_FILE, 'r'
          \close!
          error "test file '#{TEST_FILE}' already exists, please remove it"
        with assert io.open TEST_FILE, 'w+'
          \close!
        with assert io.open TEST_FILE, 'r'
          \close!
        os.remove TEST_FILE
        with? io.open TEST_FILE, 'r'
          \close!
          error "expected test file '#{TEST_FILE}' to have been removed after calling os.remove"
    * name: 'HOST is unchanged'
      check: ->
        host = detect_host!
        if HOST != host
          error "host detection heuristic changed"
  failed = false
  for test in *tests
    try
      test.check!
    catch err
      print "* test '#{test.name}' failed:\n  #{err}"
      failed = true
  if failed
    error 'some compatibility checks failed'
