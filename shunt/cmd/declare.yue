local *
local DeclareTrainState
local DeclareTrainStateResponse

import 'shunt.clap' as :Flag, :Param, :Subcommand
import 'shunt.pc' as :Pc
import 'shunt.peripheral.uplink' as :IdempotenceToken, :Packet, :TIMEOUT, :Uplink
import 'shunt.quicktype' as :declare_type, :F
import 'shunt.spec' as :spec

declare_type 'DeclareArgs', [[{
  train: ?{
    name: string,
    state: TrainState,
  },
}]]
declare_type 'TrainState', '"cleared"|"reserved"'
export subcommand = with Subcommand 'declare'
  \description 'make declarations about the state of the system'
  \add with Subcommand 'train'
    \description 'declare things about trains'
    \add with Param 'name'
      \description 'name of the train'
    \add with Param 'state'
      \description 'new state of the train'
      \options
        * 'cleared'
        * 'reserved'

export main = F '({}) -> <>', (args) ->
  with Declarer Uplink!, Pc!
    err = if args.train?
      { :name, :state } = args.train
      \declare_train_state name, state
    else
      error 'internal error: nothing to declare'

    if err?
      print "cannot make declaration: #{err}"

class Declarer
  new: F '(Uplink, Pc) => <>', (@uplink, @pc) =>

  declare_train_state: F '(string, TrainState) => ?string', (train_name, state) =>
    idemp_tok = IdempotenceToken!
    @uplink\broadcast DeclareTrainState idemp_tok, @pc\id!, train_name, state

    MAX_ATTEMPTS = 3
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "awaiting response (attempt #{i}/#{MAX_ATTEMPTS})"

      _, resp = @uplink\receive_from_any DeclareTrainStateResponse, timeout: 5
      if resp == TIMEOUT
        continue
      if resp.idemp_tok != idemp_tok
        continue
      return resp.error_reason
    return "no response from marshal after #{MAX_ATTEMPTS} attempts"

declare_type 'DeclareTrainState', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
  train_name: string,
  state: TrainState,
}]]
export class DeclareTrainState extends Packet
  new: F '(IdempotenceToken, number, string, TrainState) => <>', (@idemp_tok, @pc_id, @train_name, @state) =>
    super!

declare_type 'DeclareTrainStateResponse', [[{
  idemp_tok: IdempotenceToken,
  error_reason: ?string,
}]]
export class DeclareTrainStateResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @error_reason) =>
    super!

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.pc' as :TestPcBackend
  import 'shunt.peripheral.uplink' as :TestUplinkBackend
  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq, has_fields, len, lt, matches from matchers

  describe 'Declarer', ->
    it 'declares train states', ->
      PC_ID = 12345
      ERR = 'some error message'
      local idemp_tok
      uplink = Uplink TestUplinkBackend
        on_send: (_, packet, _) =>
          idemp_tok = packet.idemp_tok
          true
        on_broadcast: (packet, _) =>
          idemp_tok = packet.idemp_tok
          true
        to_receive:
          * -> with {}
            .from_id = PC_ID
            .packet = DeclareTrainStateResponse idemp_tok, nil
          * -> with {}
            .from_id = PC_ID
            .packet = DeclareTrainStateResponse idemp_tok, ERR
      pc = Pc TestPcBackend
        id: => 1
      with Declarer uplink, pc
        TRAIN_NAME = 'test-train'
        TRAIN_STATE = 'cleared'

        $expect_that (\declare_train_state TRAIN_NAME, TRAIN_STATE), eq nil
        $expect_that (\declare_train_state TRAIN_NAME, TRAIN_STATE), eq ERR
