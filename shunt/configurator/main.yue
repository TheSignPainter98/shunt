local *

local MarshalIdentityRequest
local MarshalIdentityResponse
local GetConfigRequest
local GetConfigResponse
local SetConfigRequest
local SetConfigResponse

import 'shunt.configurator.editor' as :ABORT, :Editor
import 'shunt.pc' as :Pc
import 'shunt.peripheral.uplink' as :IdempotenceToken, :Packet, :TIMEOUT, :Uplink
import 'shunt.quicktype' as :declare_type, :F, :is, :T
import 'shunt.spec' as :spec

import 'shunt.toml'

export class Configurator
  new: F '(?Pc, ?Uplink, ?Editor) => <>', (@pc=Pc!, @uplink=Uplink!, @editor=Editor!) =>

  get_pc_id: F '(string|"marshal") => <?number, ?string>', (name) =>
    name_to_request = switch name
      when 'marshal'
        nil
      else
        name

    MAX_ATTEMPTS = 3
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "getting marshal PC ID... (attempt #{i}/#{MAX_ATTEMPTS})"

      idemp_tok = IdempotenceToken!
      @uplink\broadcast MarshalIdentityRequest idemp_tok, @pc\id!, name_to_request
      _, resp = @uplink\receive_from_any MarshalIdentityResponse, timeout: 5
      if resp == TIMEOUT
        continue
      if resp.idemp_tok != idemp_tok
        continue
      if 'number' != type resp.resp
        return nil, resp.resp
      return resp.resp, nil
    nil, "cannot find marshal after #{MAX_ATTEMPTS} attempts"

  configure: F '(number, string, ?boolean) => ?string', (pc_id, what, prompt=true) =>
    config, err = @get_config pc_id
    if err != nil
      return err

    local on_attempt
    if prompt
      on_attempt = @@\ask_permission_on_attempt

    checker = @@config_checker what
    config, err = @editor\edit_text config, "shunt.toml (#{what})", checker, on_attempt
    if err?
      return err

    @set_config pc_id, config

  get_config: F '(number) => <?string, ?string>', (pc_id) =>
    MAX_ATTEMPTS = 3
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "getting config... (attempt #{i}/#{MAX_ATTEMPTS})"

      idemp_tok = IdempotenceToken!
      @uplink\send_to pc_id, GetConfigRequest idemp_tok, @pc\id!
      _, resp = @uplink\receive_from_any GetConfigResponse, timeout: 5
      if resp == TIMEOUT
        continue
      if resp.idemp_tok != idemp_tok
        continue
      return resp.raw, nil

    nil, "cannot find marshal after #{MAX_ATTEMPTS} attempts"

  set_config: F '(number, string) => ?string', (pc_id, config) =>
    MAX_ATTEMPTS = 5
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "setting config... (attempt #{i}/#{MAX_ATTEMPTS})"

      idemp_tok = IdempotenceToken!
      @uplink\send_to pc_id, SetConfigRequest idemp_tok, @pc\id!, config
      _, resp = @uplink\receive_from_any SetConfigResponse, timeout: 5
      if resp == TIMEOUT
        continue
      if resp.idemp_tok != idemp_tok
        break
      return resp.error_reason

    "cannot find pc ##{pc_id} after #{MAX_ATTEMPTS} attempts"

  @expected_instance_types: T '{string->string}',
    marshal: 'MarshalConfig'
    factory: 'FactoryConfig'
  @config_checker: F '(string) => (string) -> boolean', (instance_type) =>
    expected_type = @expected_instance_types[instance_type]
    if not expected_type?
      error "internal error: unknown instance type #{instance_type}"

    F '(string) -> boolean', (raw) ->
      config, err = toml.decode raw
      if err?
        print err
        return false
      _, err = is expected_type, config
      if err?
        print err
        return false
      true

  @ask_permission_on_attempt: F '(string, number) => ?ABORT', (file_name, attempt) =>
    print "press [ENTER] edit #{file_name}, [q] to abort"
    resp = io.read '*l'
    switch resp
      when 'q'
        ABORT
      when ''
        nil

declare_type 'MarshalIdentityRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
  name: ?string,
}]]
export class MarshalIdentityRequest extends Packet
  new: F '(IdempotenceToken, number, ?string) => <>', (@idemp_tok, @pc_id, @name) =>
    super!

declare_type 'MarshalIdentityResponse', [[{
  idemp_tok: IdempotenceToken,
  resp: number|string,
}]]
export class MarshalIdentityResponse extends Packet
  new: F '(IdempotenceToken, number|string) => <>', (@idemp_tok, @resp) =>
    super!

declare_type 'GetConfigRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
}]]
export class GetConfigRequest extends Packet
  new: F '(IdempotenceToken, number) => <>', (@idemp_tok, @pc_id) =>
    super!

export class GetConfigResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @raw) =>
    super!

declare_type 'SetConfigRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
  raw: string,
}]]
export class SetConfigRequest extends Packet
  new: F '(IdempotenceToken, number, string) => <>', (@idemp_tok, @pc_id, @raw) =>
    super!

export class SetConfigResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @error_reason) =>
    super!

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.configurator.editor' as :TestEditorBackend
  import 'shunt.pc' as :TestPcBackend
  import 'shunt.peripheral.uplink' as :TestUplinkBackend
  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, each_value, eq, gt, has_type, has_fields, matches, not_ from matchers

  describe 'Configurator', ->
    CONFIGURATOR_PC_ID = 1
    MARSHAL_PC_ID = 2
    ORIGINAL_CONFIG = [[
      [marshal]
    ]]
    edited_config = [[
      [marshal]
      key = 'value'
    ]]

    pc = Pc TestPcBackend
      id: => CONFIGURATOR_PC_ID

    active_responses = T '{string->boolean}', {}
    local idemp_tok
    uplink = Uplink TestUplinkBackend
      on_send: (_, packet, _) =>
        if packet.idemp_tok?
          idemp_tok = packet.idemp_tok
        true
      on_broadcast: (packet, _) =>
        if packet.idemp_tok?
          idemp_tok = packet.idemp_tok
        true
      on_receive: (protocol, _) =>
        $assert_that idemp_tok, not_ eq nil
        $assert_that protocol, not_ eq nil
        active_responses[protocol] or false
      to_receive:
        * -> with {}
          .from_id = MARSHAL_PC_ID
          .packet = MarshalIdentityResponse idemp_tok, MARSHAL_PC_ID
        * -> with {}
          .from_id = MARSHAL_PC_ID
          .packet = GetConfigResponse idemp_tok, ORIGINAL_CONFIG
        * -> with {}
          .from_id = MARSHAL_PC_ID
          .packet = SetConfigResponse idemp_tok, nil

    editor = Editor TestEditorBackend
      edit_file: (path) =>
        with assert io.open path, 'w'
          assert \write edited_config
          assert \close!
        nil
    editor.max_retries = 1

    reset = ->
      uplink.backend\reset!
      idemp_tok = nil
      active_responses =
        MarshalIdentityResponse: true
        GetConfigResponse: true
        SetConfigResponse: true

    it 'handles okay case', ->
      reset!
      with Configurator pc, uplink, editor
        pc_id, err = \get_pc_id 'marshal'
        $assert_that pc_id, eq MARSHAL_PC_ID
        $assert_that err, eq nil

        err = \configure pc_id, 'marshal', false
        $expect_that err, eq nil

      $expect_that #uplink.backend.broadcasted, eq 1
      $expect_that uplink.backend.broadcasted[1], has_fields
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq MarshalIdentityRequest::protocol!
      $expect_that #uplink.backend.sent, eq 2
      $expect_that uplink.backend.sent[1], has_fields
        id: eq MARSHAL_PC_ID
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq GetConfigRequest::protocol!
      $expect_that uplink.backend.sent[2], has_fields
        id: eq MARSHAL_PC_ID
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
          raw: eq edited_config
        protocol: eq SetConfigRequest::protocol!

    it 'handles connection loss when getting marshal identity', ->
      reset!
      active_responses.MarshalIdentityResponse = false

      with Configurator pc, uplink, editor
        pc_id, err = \get_pc_id 'marshal'
        $assert_that pc_id, eq nil
        $assert_that err, matches "cannot find marshal"

      $expect_that #uplink.backend.broadcasted, gt 1
      $expect_that uplink.backend.broadcasted, each_value has_fields
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq MarshalIdentityRequest::protocol!
      $expect_that #uplink.backend.sent, eq 0

    it 'handles connection loss when getting config', ->
      reset!
      active_responses.GetConfigResponse = false

      with Configurator pc, uplink, editor
        pc_id, err = \get_pc_id 'marshal'
        $assert_that pc_id, eq MARSHAL_PC_ID
        $assert_that err, eq nil

        err = \configure pc_id, 'marshal', false
        $expect_that err, matches 'cannot find marshal'

      $expect_that #uplink.backend.broadcasted, eq 1
      $expect_that uplink.backend.broadcasted[1], has_fields
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq MarshalIdentityRequest::protocol!
      $expect_that #uplink.backend.sent, gt 1
      $expect_that uplink.backend.sent, each_value has_fields
        id: eq MARSHAL_PC_ID
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq GetConfigRequest::protocol!

    it 'handles connection loss when setting config', ->
      reset!
      active_responses.SetConfigResponse = false

      with Configurator pc, uplink, editor
        pc_id, err = \get_pc_id 'marshal'
        $assert_that pc_id, eq MARSHAL_PC_ID
        $assert_that err, eq nil

        err = \configure pc_id, 'marshal', false
        $expect_that err, matches 'cannot find pc #'

      $expect_that #uplink.backend.broadcasted, eq 1
      $expect_that uplink.backend.broadcasted[1], has_fields
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq MarshalIdentityRequest::protocol!
      $expect_that #uplink.backend.sent, gt 2
      $expect_that uplink.backend.sent[1], has_fields
        id: eq MARSHAL_PC_ID
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
        protocol: eq GetConfigRequest::protocol!
      sent_tail = [ msg for msg in *uplink.backend.sent[2,] ]
      $expect_that sent_tail, each_value has_fields
        id: eq MARSHAL_PC_ID
        packet: has_fields
          idemp_tok: not_ eq nil
          pc_id: eq CONFIGURATOR_PC_ID
          raw: eq edited_config
        protocol: eq SetConfigRequest::protocol!

    it 'validates config', ->
      reset!
      edited_config = [[
        [invalid-config]
      ]]

      with Configurator pc, uplink, editor
        pc_id, err = \get_pc_id 'marshal'
        $assert_that pc_id, eq MARSHAL_PC_ID
        $assert_that err, eq nil

        err = \configure pc_id, 'marshal', false
        $expect_that err, matches 'max edit retries reached'
