local *

import 'shunt.configurator.main' as :GetConfigRequest, :GetConfigResponse, :SetConfigRequest, :SetConfigResponse
import 'shunt.data.queue' as :Queue
import 'shunt.firewall' as :Firewall
import 'shunt.quicktype' as :declare_type, :F, :is
import 'shunt.state' as :shallow_log_reporter, :State, :StateMachineBuilder, :StateResponsesBuilder

import 'shunt.toml'

declare_type 'ConfigListener', 'Component'
declare_type 'ConfigListenerEvent', [[{
  type: "network-packet",
}]]
declare_type 'ConfigListenerOpts', [[{
  config_type: string,
  target: Component + { config: some },
  uplink: Uplink,
}]]
export class ConfigListener
  new: F '(ConfigListenerOpts) => <>', (opts) =>
    {
      :config_type
      :target
      :uplink
    } = opts
    @config_type = config_type
    @target = target
    @uplink = uplink

    @events = Queue 'ConfigListenerEvent'

    @firewall = Firewall
      * GetConfigRequest
      * SetConfigRequest
    @sm = @@make_sm!
    @sm_responses = @make_sm_responses @sm

  @make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'config_listener')
      \set_initial_state 'waiting'
      \declare_endless!
      \set_reporter shallow_log_reporter
      \add (State 'waiting')
        \add_transition_to 'inspecting_packet'
      \add (State 'inspecting_packet')
        \set_data_type [[{
          packet: Packet,
        }]]
        \add_transition_to 'analysing_get_config_request'
        \add_transition_to 'analysing_set_config_request'
      \add (State 'analysing_get_config_request')
        \set_data_type [[{
          packet: GetConfigRequest,
        }]]
        \add_transition_to 'sending_get_config_response'
      \add (State 'sending_get_config_response')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          recipient_id: number,
          raw: string,
        }]]
        \add_transition_to 'waiting'
      \add (State 'analysing_set_config_request')
        \set_data_type [[{
          packet: SetConfigRequest,
        }]]
        \add_transition_to 'sending_set_config_response'
      \add (State 'sending_set_config_response')
        \set_data_type [[{
          idemp_tok: IdempotenceToken,
          recipient_id: number,
          response: { config: {} }
            | { error_reason: string },
          error: ?string,
        }]]
        \add_transition_to 'scheduling_config_application'
        \add_transition_to 'waiting'
      \add (State 'scheduling_config_application')
        \set_data_type [[{
          config: {},
        }]]
        \add_transition_to 'waiting'
      \build!

  make_sm_responses: F '(StateMachine) => StateResponses', (sm) =>
    (StateResponsesBuilder sm)
      \add 'waiting', @\on_waiting
      \add 'inspecting_packet', @\on_inspecting_packet
      \add 'analysing_get_config_request', @\on_analysing_get_config_request
      \add 'sending_get_config_response', @\on_sending_get_config_response
      \add 'analysing_set_config_request', @\on_analysing_set_config_request
      \add 'sending_set_config_response', @\on_sending_set_config_response
      \add 'scheduling_config_application', @\on_scheduling_config_application
      \build!

  step: F '() => <>', =>
    @sm_responses[@sm.state.name]!

  on_waiting: F '() => <>', =>
    event = @events\dequeue!
    if not event?
      return
    switch event.type
      when 'network-packet'
        @sm\goto 'inspecting_packet',
          packet: event.packet
      else
        error "internal error: unrecognised event type '#{event.type}'"

  on_inspecting_packet: F '() => <>', =>
    { :packet } = @sm.state
    switch packet.protocol
      when 'GetConfigRequest'
        @sm\goto 'analysing_get_config_request',
          :packet
      when 'SetConfigRequest'
        @sm\goto 'analysing_set_config_request',
          :packet
      else
        import 'shunt.spec' as :repr
        error "internal error: unhandled packet admitted through firewall: #{repr protocol}"

  on_analysing_get_config_request: F '() => <>', =>
    {
      packet:
        :idemp_tok
        :pc_id
    } = @sm.state
    @sm\goto 'sending_get_config_response',
      :idemp_tok
      recipient_id: pc_id
      raw: @target.config.<raw>

  on_sending_get_config_response: F '() => <>', =>
    { :idemp_tok, :recipient_id, :raw } = @sm.state
    @uplink\send_to recipient_id, GetConfigResponse idemp_tok, raw
    @sm\goto 'waiting'

  on_analysing_set_config_request: F '() => <>', =>
    {
      packet:
        :idemp_tok
        :pc_id
        :raw
    } = @sm.state
    config, error_reason = toml.decode raw
    if err?
      @sm\goto 'sending_set_config_response',
        :idemp_tok
        recipient_id: pc_id
        response:
          :error_reason
      return

    ok, error_reason = is @config_type, config
    if not ok
      @sm\goto 'sending_set_config_response',
        :idemp_tok
        recipient_id: pc_id
        response:
          :error_reason
      return

    config.<> = {}
    config.<raw> = raw
    @sm\goto 'sending_set_config_response',
      :idemp_tok
      recipient_id: pc_id
      response:
        :config

  on_sending_set_config_response: F '() => <>', =>
    {
      :idemp_tok
      :recipient_id
      response:
        :config
        :error_reason
    } = @sm.state
    if config?
      @uplink\send_to recipient_id, SetConfigResponse idemp_tok, nil
      @sm\goto 'scheduling_config_application',
        :config
    else if error_reason?
      @uplink\send_to recipient_id, SetConfigResponse idemp_tok, error_reason
      @sm\goto 'waiting'
    else
      error 'unreachable'

  on_scheduling_config_application: F '() => <>', =>
    { :config } = @sm.state
    @target.events\enqueue
      type: 'new-config'
      :config
    @sm\goto 'waiting'
