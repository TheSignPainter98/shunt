local *

import 'shunt.quicktype' as :declare_singleton_type, :declare_type, :F, :T
import 'shunt.spec' as :spec

declare_type 'Editor', [[{
  edit_file: (string) => ?string,
  edit_text: (
      string,
      string,
      ?(string) -> boolean,
      ?(string, number) -> ?ABORT
    ) => <?string, ?string>,
}]]
declare_type 'EditorBackend', [[{
  edit_file: (string) => ?string,
}]]
export ABORT = <tostring>: => 'ABORT'
declare_singleton_type ABORT
export class Editor
  new: F '(?EditorBackend) => <>', (@backend=MinecraftBackend!) =>
    @max_retries = T '?number', nil

  edit_file: F '(string) => ?string', (path) =>
    @backend\edit_file path

  edit_text: F '(string, string, ?(string) -> boolean, ?(string, number) -> ?ABORT) => <?string, ?string>', (text, value_name, check, on_attempt) =>
    tmp_path = os.tmpname!

    with assert io.open tmp_path, 'w+'
      assert \write text
      assert \close!

    local err
    attempt_num = 0
    repeat
      attempt_num += 1
      if on_attempt?
        err = on_attempt value_name, attempt_num
        if err?
          break

      err = @backend\edit_file tmp_path
      if err?
        break

      with assert io.open tmp_path, 'r'
        text = \read '*a'
        \close!
      if @max_retries? and attempt_num > @max_retries
        err = 'max edit retries reached'
        break
    until not check? or (check text)

    os.remove tmp_path

    if err == ABORT
      err = 'aborted'
    if err?
      nil, err
    else
      text, nil

class MinecraftBackend
  new: =>
    @editor = 'edit'

  edit_file: F '(string) => ?string', (path) =>
    ok = shell.execute @editor, path
    if not ok
      return "#{@editor} exited unsuccessfully"
    nil

declare_type 'TestEditorBackendOpts', [[{
  edit_file: ?(string) => ?string,
}]]
export class TestEditorBackend
  new: F '(?TestEditorBackendOpts) => <>', (opts={}) =>
    {
      :edit_file=-> error 'edit_file unimplemented'
    } = opts
    @edit_file = F '(string) => ?string', edit_file

class LinuxBackend
  new: =>
    @editor = do
      editor = os.getenv 'EDITOR'
      if not editor
        error 'cannot create LinuxEditor: $EDITOR not set'
      editor

  edit_file: F '(string) => ?string', (path) =>
    if path\match "'"
      error 'internal error: LinuxEditor quotes'
    rc = os.execute "nvim '#{path}'" -- SeCuRiTy
    if rc != 0
      return "#{@editor} exited with code #{rc}"
    nil

spec ->
  import 'shunt.spec_macros' as $

  import 'shunt.spec' as :describe, :it, :matchers

  import deep_eq, eq from matchers

  describe 'Editor', ->
    it 'edits text', ->
      FILE_PATH = 'file.txt'
      file_content = 'ab'\rep 10
      editor = Editor TestEditorBackend
        edit_file: (path) =>
          $expect_that path, eq FILE_PATH

          file_content = file_content\gsub 'b', 'c'
      editor\edit_file FILE_PATH
      $expect_that file_content, eq 'ac'\rep 10

    it 'edits text with a checker', ->
      FILE_PATH = 'file.txt'
      editor = Editor TestEditorBackend
        edit_file: (path) =>
          with assert io.open path, 'a'
            assert \write 'a'
            assert \close!
          file_content = "a#{file_content}"

      num_edits = 0
      file = 'value-name'
      text = 'a'\rep 7
      checker = F '(string) -> boolean', (text) ->
        num_edits += 1
        #text >= 10
      attempts = {}
      on_attempt = F '(string, number) -> ?ABORT', (file, attempt) ->
        attempts[] = :file, :attempt
        nil
      result, err = editor\edit_text text, file, checker, on_attempt

      $expect_that result, eq 'a'\rep 10
      $expect_that err, eq nil
      $expect_that num_edits, eq 3
      $expect_that attempts, deep_eq
        * :file,
          attempt: 1
        * :file,
          attempt: 2
        * :file,
          attempt: 3
